mutate(first_release_date = min(release_date),
days_since_first_release = as.integer(release_date - first_release_date))
return(df)
}
# Filter for Coldplay and Metallica only
df_bands <- df %>%
filter(artist %in% c("Coldplay", "Metallica")) %>%
group_by(artist, month_year) %>%
summarise(
avg_popularity = mean(popularity, na.rm = TRUE),
avg_acousticness = mean(acousticness, na.rm = TRUE),
avg_danceability = mean(danceability, na.rm = TRUE),
avg_energy = mean(energy, na.rm = TRUE)
) %>%
pivot_longer(
cols = starts_with("avg"),
names_to = "category",
values_to = "value"
)
df_bands$month_year <- as.Date(paste(df_bands$month_year, "01", sep = "-"))
df_bands %>%
ggplot(aes(x = month_year, y = value, fill = artist)) +
geom_stream() +
facet_wrap(~ category, scales = "free_y", ncol = 1) +
scale_fill_manual(values = c("Coldplay" = "#1669da", "Metallica" = "#bababa")) +
th +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x.top = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom") +
labs(title = "Figure 1: Stream Plot of Artist Characteristics Over time",
x = "",
y = "Count",
fill = "")
# Filter for Coldplay and Metallica only
df_filtered <- df %>%
filter(artist %in% c("Coldplay", "Metallica"))
# Create boxplot
ggplot(df_filtered, aes(x = album_name, y = popularity, fill = artist)) +
geom_boxplot() +
scale_fill_manual(values = c("blue", "black")) +
labs(
title = "Album Popularity Comparison: Coldplay vs Metallica",
x = "Artist",
y = "Popularity"
) +
th +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#   Housekeeping
setwd("/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/20713479-DatSci-Prac")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#   Clear environment
#rm(list = ls())
options(scipen = 999)
#   Get external code
source("utilities/aesthetics.R") #  Get plot themes
source("utilities/convert_numeric.R")  # Convert multiple columns to numeric
#   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo,
rnaturalearth, rnaturalearthdata, sf, lwgeom, jtools)
#   Load Data
path <- "data/Coldplay_vs_Metallica/"
file <- "Coldplay.csv"
df_coldplay <- read_csv(paste0(path, file))
file <- "metallica.csv"
df_metallica <- read_csv(paste0(path, file))
df_metallica$album_name <- df_metallica$album
file <- "Broader_Spotify_Info.csv"
df_spotify <- read_csv(paste0(path, file))
df_coldplay <- df_coldplay %>%
mutate(artist = "Coldplay")
df_metallica <- df_metallica %>%
mutate(artist = "Metallica")
# Merge datasets
df <- bind_rows(df_coldplay, df_metallica, df_spotify)
# Function to check and convert duration
convert_duration <- function(duration, duration_ms) {
# If 'duration' is NA and 'duration_ms' is not NA
if (is.na(duration) & !is.na(duration_ms)) {
# Convert milliseconds to seconds
duration <- duration_ms / 1000
}
return(duration)
}
df$duration <- mapply(convert_duration, df$duration, df$duration_ms)
filter_words <- c("Live", "Remix", "Remastered", "Deluxe")
# Function to check if a song name contains any filter word
contains_filter_word <- function(name) {
return(any(str_detect(name, regex(paste(filter_words, collapse = "|"), ignore_case = TRUE))))
}
# Apply the function to the 'name' column
df <- df[!mapply(contains_filter_word, df$name), ]
df <- df %>%
mutate(month_year = format(as.Date(release_date), "%Y-%m"))
df_bands$month_year <- as.Date(paste(df_bands$month_year, "01", sep = "-"))
calculate_days_since_first_release <- function(df) {
df <- df %>%
arrange(artist, release_date) %>%
group_by(artist) %>%
mutate(first_release_date = min(release_date),
days_since_first_release = as.integer(release_date - first_release_date))
return(df)
}
# Filter for Coldplay and Metallica only
df_bands <- df %>%
filter(artist %in% c("Coldplay", "Metallica")) %>%
group_by(artist, month_year) %>%
summarise(
avg_popularity = mean(popularity, na.rm = TRUE),
avg_acousticness = mean(acousticness, na.rm = TRUE),
avg_danceability = mean(danceability, na.rm = TRUE),
avg_energy = mean(energy, na.rm = TRUE)
) %>%
pivot_longer(
cols = starts_with("avg"),
names_to = "category",
values_to = "value"
)
df_bands$month_year <- as.Date(paste(df_bands$month_year, "01", sep = "-"))
df_bands %>%
ggplot(aes(x = month_year, y = value, fill = artist)) +
geom_stream() +
facet_wrap(~ category, scales = "free_y", ncol = 1) +
scale_fill_manual(values = c("Coldplay" = "#1669da", "Metallica" = "#bababa")) +
th +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x.top = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom") +
labs(title = "Figure 1: Stream Plot of Artist Characteristics Over time",
x = "",
y = "Count",
fill = "")
# Filter for Coldplay and Metallica only
df_filtered <- df %>%
filter(artist %in% c("Coldplay", "Metallica"))
# Create boxplot
ggplot(df_filtered, aes(x = album_name, y = popularity, fill = artist)) +
geom_boxplot() +
scale_fill_manual(values = c("blue", "black")) +
labs(
title = "Album Popularity Comparison: Coldplay vs Metallica",
x = "Artist",
y = "Popularity"
) +
th +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#   Housekeeping
setwd("/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/20713479-DatSci-Prac")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#   Clear environment
#rm(list = ls())
options(scipen = 999)
#   Get external code
source("utilities/aesthetics.R") #  Get plot themes
source("utilities/convert_numeric.R")  # Convert multiple columns to numeric
#   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo,
rnaturalearth, rnaturalearthdata, sf, lwgeom, jtools)
#   Load Data
path <- "data/Coldplay_vs_Metallica/"
file <- "Coldplay.csv"
df_coldplay <- read_csv(paste0(path, file))
file <- "metallica.csv"
df_metallica <- read_csv(paste0(path, file))
df_metallica$album_name <- df_metallica$album
file <- "Broader_Spotify_Info.csv"
df_spotify <- read_csv(paste0(path, file))
df_coldplay <- df_coldplay %>%
mutate(artist = "Coldplay")
df_metallica <- df_metallica %>%
mutate(artist = "Metallica")
# Merge datasets
df <- bind_rows(df_coldplay, df_metallica, df_spotify)
# Function to check and convert duration
convert_duration <- function(duration, duration_ms) {
# If 'duration' is NA and 'duration_ms' is not NA
if (is.na(duration) & !is.na(duration_ms)) {
# Convert milliseconds to seconds
duration <- duration_ms / 1000
}
return(duration)
}
df$duration <- mapply(convert_duration, df$duration, df$duration_ms)
filter_words <- c("Live", "Remix", "Remastered", "Deluxe")
# Function to check if a song name contains any filter word
contains_filter_word <- function(name) {
return(any(str_detect(name, regex(paste(filter_words, collapse = "|"), ignore_case = TRUE))))
}
# Apply the function to the 'name' column
df <- df[!mapply(contains_filter_word, df$name), ]
df <- df[!mapply(contains_filter_word, df$album_name), ]
df <- df %>%
mutate(month_year = format(as.Date(release_date), "%Y-%m"))
df_bands$month_year <- as.Date(paste(df_bands$month_year, "01", sep = "-"))
calculate_days_since_first_release <- function(df) {
df <- df %>%
arrange(artist, release_date) %>%
group_by(artist) %>%
mutate(first_release_date = min(release_date),
days_since_first_release = as.integer(release_date - first_release_date))
return(df)
}
# Filter for Coldplay and Metallica only
df_bands <- df %>%
filter(artist %in% c("Coldplay", "Metallica")) %>%
group_by(artist, month_year) %>%
summarise(
avg_popularity = mean(popularity, na.rm = TRUE),
avg_acousticness = mean(acousticness, na.rm = TRUE),
avg_danceability = mean(danceability, na.rm = TRUE),
avg_energy = mean(energy, na.rm = TRUE)
) %>%
pivot_longer(
cols = starts_with("avg"),
names_to = "category",
values_to = "value"
)
df_bands$month_year <- as.Date(paste(df_bands$month_year, "01", sep = "-"))
df_bands %>%
ggplot(aes(x = month_year, y = value, fill = artist)) +
geom_stream() +
facet_wrap(~ category, scales = "free_y", ncol = 1) +
scale_fill_manual(values = c("Coldplay" = "#1669da", "Metallica" = "#bababa")) +
th +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x.top = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom") +
labs(title = "Figure 1: Stream Plot of Artist Characteristics Over time",
x = "",
y = "Count",
fill = "")
# Filter for Coldplay and Metallica only
df_filtered <- df %>%
filter(artist %in% c("Coldplay", "Metallica"))
# Create boxplot
ggplot(df_filtered, aes(x = album_name, y = popularity, fill = artist)) +
geom_boxplot() +
scale_fill_manual(values = c("blue", "black")) +
labs(
title = "Album Popularity Comparison: Coldplay vs Metallica",
x = "Artist",
y = "Popularity"
) +
th +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#   Housekeeping
setwd("/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/20713479-DatSci-Prac")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#   Clear environment
#rm(list = ls())
options(scipen = 999)
#   Get external code
source("utilities/aesthetics.R") #  Get plot themes
source("utilities/convert_numeric.R")  # Convert multiple columns to numeric
#   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo,
rnaturalearth, rnaturalearthdata, sf, lwgeom, jtools)
#   Load Data
path <- "data/Coldplay_vs_Metallica/"
file <- "Coldplay.csv"
df_coldplay <- read_csv(paste0(path, file))
file <- "metallica.csv"
df_metallica <- read_csv(paste0(path, file))
df_metallica$album_name <- df_metallica$album
file <- "Broader_Spotify_Info.csv"
df_spotify <- read_csv(paste0(path, file))
df_coldplay <- df_coldplay %>%
mutate(artist = "Coldplay")
df_metallica <- df_metallica %>%
mutate(artist = "Metallica")
# Merge datasets
df <- bind_rows(df_coldplay, df_metallica, df_spotify)
# Function to check and convert duration
convert_duration <- function(duration, duration_ms) {
# If 'duration' is NA and 'duration_ms' is not NA
if (is.na(duration) & !is.na(duration_ms)) {
# Convert milliseconds to seconds
duration <- duration_ms / 1000
}
return(duration)
}
df$duration <- mapply(convert_duration, df$duration, df$duration_ms)
filter_words <- c("Live", "Remix", "Remastered", "Deluxe", "Prospekt")
# Function to check if a song name contains any filter word
contains_filter_word <- function(name) {
return(any(str_detect(name, regex(paste(filter_words, collapse = "|"), ignore_case = TRUE))))
}
# Apply the function to the 'name' column
df <- df[!mapply(contains_filter_word, df$name), ]
df <- df[!mapply(contains_filter_word, df$album_name), ]
df <- df %>%
mutate(month_year = format(as.Date(release_date), "%Y-%m"))
df_bands$month_year <- as.Date(paste(df_bands$month_year, "01", sep = "-"))
calculate_days_since_first_release <- function(df) {
df <- df %>%
arrange(artist, release_date) %>%
group_by(artist) %>%
mutate(first_release_date = min(release_date),
days_since_first_release = as.integer(release_date - first_release_date))
return(df)
}
#   Housekeeping
setwd("/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/20713479-DatSci-Prac")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#   Clear environment
#rm(list = ls())
options(scipen = 999)
#   Get external code
source("utilities/aesthetics.R") #  Get plot themes
source("utilities/convert_numeric.R")  # Convert multiple columns to numeric
#   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo,
rnaturalearth, rnaturalearthdata, sf, lwgeom, jtools)
#   Load Data
path <- "data/Coldplay_vs_Metallica/"
file <- "Coldplay.csv"
df_coldplay <- read_csv(paste0(path, file))
file <- "metallica.csv"
df_metallica <- read_csv(paste0(path, file))
df_metallica$album_name <- df_metallica$album
file <- "Broader_Spotify_Info.csv"
df_spotify <- read_csv(paste0(path, file))
df_coldplay <- df_coldplay %>%
mutate(artist = "Coldplay")
df_metallica <- df_metallica %>%
mutate(artist = "Metallica")
# Merge datasets
df <- bind_rows(df_coldplay, df_metallica, df_spotify)
# Function to check and convert duration
convert_duration <- function(duration, duration_ms) {
# If 'duration' is NA and 'duration_ms' is not NA
if (is.na(duration) & !is.na(duration_ms)) {
# Convert milliseconds to seconds
duration <- duration_ms / 1000
}
return(duration)
}
df$duration <- mapply(convert_duration, df$duration, df$duration_ms)
filter_words <- c("Live", "Remix", "Remastered", "Deluxe", "Prospekt", "Edition")
# Function to check if a song name contains any filter word
contains_filter_word <- function(name) {
return(any(str_detect(name, regex(paste(filter_words, collapse = "|"), ignore_case = TRUE))))
}
# Apply the function to the 'name' column
df <- df[!mapply(contains_filter_word, df$name), ]
df <- df[!mapply(contains_filter_word, df$album_name), ]
df <- df %>%
mutate(month_year = format(as.Date(release_date), "%Y-%m"))
df_bands$month_year <- as.Date(paste(df_bands$month_year, "01", sep = "-"))
calculate_days_since_first_release <- function(df) {
df <- df %>%
arrange(artist, release_date) %>%
group_by(artist) %>%
mutate(first_release_date = min(release_date),
days_since_first_release = as.integer(release_date - first_release_date))
return(df)
}
# Filter for Coldplay and Metallica only
df_bands <- df %>%
filter(artist %in% c("Coldplay", "Metallica")) %>%
group_by(artist, month_year) %>%
summarise(
avg_popularity = mean(popularity, na.rm = TRUE),
avg_acousticness = mean(acousticness, na.rm = TRUE),
avg_danceability = mean(danceability, na.rm = TRUE),
avg_energy = mean(energy, na.rm = TRUE)
) %>%
pivot_longer(
cols = starts_with("avg"),
names_to = "category",
values_to = "value"
)
df_bands$month_year <- as.Date(paste(df_bands$month_year, "01", sep = "-"))
df_bands %>%
ggplot(aes(x = month_year, y = value, fill = artist)) +
geom_stream() +
facet_wrap(~ category, scales = "free_y", ncol = 1) +
scale_fill_manual(values = c("Coldplay" = "#1669da", "Metallica" = "#bababa")) +
th +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x.top = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom") +
labs(title = "Figure 1: Stream Plot of Artist Characteristics Over time",
x = "",
y = "Count",
fill = "")
# Filter for Coldplay and Metallica only
df_filtered <- df %>%
filter(artist %in% c("Coldplay", "Metallica"))
# Create boxplot
ggplot(df_filtered, aes(x = album_name, y = popularity, fill = artist)) +
geom_boxplot() +
scale_fill_manual(values = c("blue", "black")) +
labs(
title = "Album Popularity Comparison: Coldplay vs Metallica",
x = "Artist",
y = "Popularity"
) +
th +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Filter for Coldplay and Metallica only
df_filtered <- df %>%
filter(artist %in% c("Coldplay", "Metallica"))
# Create boxplot
ggplot(df_filtered, aes(x = album_name, y = popularity, fill = artist)) +
geom_boxplot() +
scale_fill_manual(values = c("Coldplay" = "#1669da", "Metallica" = "#bababa")) +
labs(
title = "Album Popularity Comparison: Coldplay vs Metallica",
x = "Artist",
y = "Popularity"
) +
th +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Filter for Coldplay and Metallica only
df_bands <- df %>%
filter(artist %in% c("Coldplay", "Metallica")) %>%
group_by(artist, month_year) %>%
summarise(
avg_popularity = mean(popularity, na.rm = TRUE),
avg_acousticness = mean(acousticness, na.rm = TRUE),
avg_danceability = mean(danceability, na.rm = TRUE),
avg_energy = mean(energy, na.rm = TRUE),
avg_tempo = mean(tempo, na.rm = TRUE)
) %>%
pivot_longer(
cols = starts_with("avg"),
names_to = "category",
values_to = "value"
)
df_bands$month_year <- as.Date(paste(df_bands$month_year, "01", sep = "-"))
df_bands %>%
ggplot(aes(x = month_year, y = value, fill = artist)) +
geom_stream() +
facet_wrap(~ category, scales = "free_y", ncol = 1) +
scale_fill_manual(values = c("Coldplay" = "#1669da", "Metallica" = "#bababa")) +
th +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x.top = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom") +
labs(title = "Figure 1: Stream Plot of Artist Characteristics Over time",
x = "",
y = "Count",
fill = "")
# Filter for Coldplay and Metallica only
df_bands <- df
filter(artist %in% c("Coldplay", "Metallica")) %>%
group_by(artist, month_year) %>%
summarise(
avg_popularity = mean(popularity, na.rm = TRUE),
avg_acousticness = mean(acousticness, na.rm = TRUE),
avg_danceability = mean(danceability, na.rm = TRUE),
avg_energy = mean(energy, na.rm = TRUE),
avg_tempo = mean(tempo, na.rm = TRUE)
) %>%
pivot_longer(
cols = starts_with("avg"),
names_to = "category",
values_to = "value"
)
# Filter for Coldplay and Metallica only
df_bands <- df %>%
filter(artist %in% c("Coldplay", "Metallica")) %>%
group_by(artist, month_year) %>%
summarise(
avg_popularity = mean(popularity, na.rm = TRUE),
avg_acousticness = mean(acousticness, na.rm = TRUE),
avg_danceability = mean(danceability, na.rm = TRUE),
avg_energy = mean(energy, na.rm = TRUE),
avg_tempo = mean(tempo, na.rm = TRUE)
) %>%
pivot_longer(
cols = starts_with("avg"),
names_to = "category",
values_to = "value"
)
df_bands$month_year <- as.Date(paste(df_bands$month_year, "01", sep = "-"))
df_bands %>%
filter(month_year > as.Date("1995-01-01")) %>%
ggplot(aes(x = month_year, y = value, fill = artist)) +
geom_stream() +
facet_wrap(~ category, scales = "free_y", ncol = 1) +
scale_fill_manual(values = c("Coldplay" = "#1669da", "Metallica" = "#bababa")) +
th +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x.top = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom") +
labs(title = "Figure 1: Stream Plot of Artist Characteristics Over time",
x = "",
y = "Count",
fill = "")
