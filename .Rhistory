df_bands %>%
filter(month_year > as.Date("1995-01-01")) %>%
ggplot(aes(x = month_year, y = value, fill = artist)) +
geom_stream() +
facet_wrap(~ category, scales = "free_y", ncol = 1) +
scale_fill_manual(values = c("Coldplay" = "#1669da", "Metallica" = "#bababa")) +
th +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x.top = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom") +
labs(title = "Figure 1: Stream Plot of Artist Characteristics Over time",
x = "",
y = "Count",
fill = "")
top_albums_table %>%
gt() %>%
tab_header(title = "Table 2: Top Albums for Coldplay and Metallica")
# Filter for Coldplay and Metallica only
df_filtered <- df %>%
filter(artist %in% c("Coldplay", "Metallica"))
df_filtered$release_date <- as.Date(df_filtered$release_date)
# Create boxplot
ggplot(df_filtered, aes(x = album_name, y = popularity, fill = artist)) +
geom_boxplot() +
scale_fill_manual(values = c("Coldplay" = "#1669da", "Metallica" = "#bababa")) +
labs(
title = "Figure 2: Album Popularity Comparison: Coldplay vs Metallica",
x = "",
y = "Popularity"
) +
th +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Filter for Coldplay and Metallica only
df_filtered <- df %>%
filter(artist %in% c("Coldplay", "Metallica"))
df_filtered$release_date <- as.Date(df_filtered$release_date)
# Visualize popularity trend with scatter plot and regression lines
ggplot(df_filtered, aes(x = release_date, y = popularity, color = artist)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
scale_color_manual(values = c("Coldplay" = "#1669da", "Metallica" = "#bababa"))+
labs(title = "Figure 3A: Popularity Trend: Coldplay vs Metallica",
x = "Year",
y = "Popularity",
color = "Artist") +
th
# Visualize energy trend with scatter plot and regression lines
ggplot(df_filtered, aes(x = release_date, y = energy, color = artist)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
scale_color_manual(values = c("Coldplay" = "#1669da", "Metallica" = "#bababa"))+
labs(title = "Figure 3B: Energy Trend: Coldplay vs Metallica",
x = "Year",
y = "Energy",
color = "Artist") +
th
# Visualize accousticness trend with scatter plot and regression lines
ggplot(df_filtered, aes(x = release_date, y = acousticness, color = artist)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
scale_color_manual(values = c("Coldplay" = "#1669da", "Metallica" = "#bababa"))+
labs(title = "Figure 3C: Acousticness Trend: Coldplay vs Metallica",
x = "Year",
y = "Acousticness",
color = "Artist") +
th
View(df_filtered)
#   Housekeeping
setwd("/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/20713479-DatSci-Prac")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#   Clear environment
rm(list = ls())
options(scipen = 999)
#   Get external code
source("utilities/aesthetics.R") #  Get plot themes
source("utilities/convert_numeric.R")  # Convert multiple columns to numeric
#   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo,
rnaturalearth, rnaturalearthdata, sf, lwgeom, jtools)
#   Load Data
path <- "data/Coldplay_vs_Metallica/"
file <- "Coldplay.csv"
df_coldplay <- read_csv(paste0(path, file))
file <- "metallica.csv"
df_metallica <- read_csv(paste0(path, file))
df_metallica$album_name <- df_metallica$album
file <- "Broader_Spotify_Info.csv"
df_spotify <- read_csv(paste0(path, file))
df_coldplay <- df_coldplay %>%
mutate(artist = "Coldplay")
df_metallica <- df_metallica %>%
mutate(artist = "Metallica")
# Merge datasets
df_unfiltered <- bind_rows(df_coldplay, df_metallica)
# Function to check and convert duration
convert_duration <- function(duration, duration_ms) {
# If 'duration' is NA and 'duration_ms' is not NA
if (is.na(duration) & !is.na(duration_ms)) {
# Convert milliseconds to seconds
duration <- duration_ms / 1000
}
return(duration)
}
df_unfiltered$duration <- mapply(convert_duration, df_unfiltered$duration, df_unfiltered$duration_ms)
filter_words <- c("Live", "Remix", "Remastered", "Deluxe", "Prospekt", "Edition")
# Function to check if a song name contains any filter word
contains_filter_word <- function(name) {
return(any(str_detect(name, regex(paste(filter_words, collapse = "|"), ignore_case = TRUE))))
}
# Apply the function to the 'name' column
df <- df_unfiltered[!mapply(contains_filter_word, df_unfiltered$name), ]
df <- df_unfiltered[!mapply(contains_filter_word, df_unfiltered$album_name), ]
df <- df %>%
mutate(month_year = format(as.Date(release_date), "%Y-%m"))
df$month_year <- as.Date(paste(df$month_year, "01", sep = "-"))
calculate_days_since_first_release <- function(df) {
df <- df %>%
arrange(artist, release_date) %>%
group_by(artist) %>%
mutate(first_release_date = min(release_date),
days_since_first_release = as.integer(release_date - first_release_date))
return(df)
}
# Function to check if a song name contains the word "Live"
is_live_version <- function(name) {
return(str_detect(name, regex("Live", ignore_case = TRUE)))
}
# Apply the is_live_version function to the 'name' column
df$version <- ifelse(mapply(is_live_version, df$name), "Live", "Studio")
df %>%
ggplot(aes(x = month_year, y = popularity)) +
geom_line() +
facet_grid(artist ~ version) +
labs(
title = "Popularity of Live vs Studio Versions Over Time",
x = "Month and Year of Release",
y = "Popularity"
) +
theme_minimal()
View(df)
# Apply the is_live_version function to the 'name' column
df$version <- ifelse(mapply(is_live_version, df$name), "Live", "Studio")
# Filter the data for only the necessary attributes
attributes <- c("popularity", "acousticness", "energy", "tempo", "danceability")
df_filtered <- df %>%
select(artist, version, one_of(attributes)) %>%
pivot_longer(cols = -c(artist, version), names_to = "attribute", values_to = "value")
# Generate the plot
df_filtered %>%
ggplot(aes(x = version, y = value, fill = version)) +
facet_grid(artist ~ attribute, scales = "free") +
geom_violin(alpha = 0.5) +
labs(
title = "Distribution of Song Attributes for Live vs. Studio Versions",
x = "Version",
y = "Value",
fill = "Version"
) +
theme_minimal() +
theme(legend.position = "none")
# Apply the is_live_version function to the 'name' column
df$version <- ifelse(mapply(is_live_version, df$name), "Live", "Studio")
# List of attributes
attributes <- c("popularity", "acousticness", "energy", "tempo", "danceability")
# Create a separate plot for each attribute
for (attribute in attributes) {
df_filtered <- df %>%
select(artist, version, attribute)
# Generate the plot
p <- df_filtered %>%
ggplot(aes(x = version, y = !!sym(attribute), fill = version)) +
facet_wrap(~ artist, scales = "free") +
geom_violin(alpha = 0.5) +
labs(
title = paste("Distribution of", attribute, "for Live vs. Studio Versions"),
x = "Version",
y = "Value",
fill = "Version"
) +
theme_minimal() +
theme(legend.position = "none")
print(p)
}
# Apply the is_live_version function to the 'name' column
df$version <- ifelse(mapply(is_live_version, df$name), "Live", "Studio")
# List of attributes
attributes <- c("popularity", "energy", "tempo", "danceability")
# Create a separate plot for each attribute
for (attribute in attributes) {
df_filtered <- df %>%
select(artist, version, attribute)
# Generate the plot
p <- df_filtered %>%
ggplot(aes(x = version, y = !!sym(attribute), fill = version)) +
facet_wrap(~ artist, scales = "free") +
geom_violin(alpha = 0.5) +
geom_jitter() +
labs(
title = paste("Distribution of", attribute, "for Live vs. Studio Versions"),
x = "Version",
y = "Value",
fill = "Version"
) +
theme_minimal() +
theme(legend.position = "none")
print(p)
}
# Apply the is_live_version function to the 'name' column
df$version <- ifelse(mapply(is_live_version, df$name), "Live", "Studio")
# List of attributes
attributes <- c("popularity", "energy", "tempo", "danceability")
# Create a separate plot for each attribute
for (attribute in attributes) {
df_filtered <- df %>%
select(artist, version, attribute)
# Generate the plot
p <- df_filtered %>%
ggplot(aes(x = version, y = !!sym(attribute), fill = version)) +
facet_wrap(~ artist, scales = "free") +
geom_violin(alpha = 0.5) +
geom_jitter() +
scale_color_manual(values = c("Coldplay" = "#1669da", "Metallica" = "#bababa"))+
scale_fill_manual(values = c("Coldplay" = "#1669da", "Metallica" = "#bababa"))+
labs(
title = paste("Distribution of", attribute, "for Live vs. Studio Versions"),
x = "Version",
y = "Value",
fill = "Version"
) +
theme_minimal() +
theme(legend.position = "none")
print(p)
}
# Apply the is_live_version function to the 'name' column
df$version <- ifelse(mapply(is_live_version, df$name), "Live", "Studio")
# List of attributes
attributes <- c("popularity", "energy", "tempo", "danceability")
# Create a separate plot for each attribute
for (attribute in attributes) {
df_filtered <- df %>%
select(artist, version, attribute)
# Generate the plot
p <- df_filtered %>%
ggplot(aes(x = version, y = !!sym(attribute), fill = version)) +
facet_wrap(~ artist, scales = "free") +
geom_violin(alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5, size = 1) +
scale_fill_manual(values = c("Live" = "#bababa", "Studio" = "#1669da"))+
labs(
title = paste("Distribution of", attribute, "for Live vs. Studio Versions"),
x = "Version",
y = "Value",
fill = "Version"
) +
theme_minimal() +
theme(legend.position = "none")
print(p)
}
# Apply the is_live_version function to the 'name' column
df$version <- ifelse(mapply(is_live_version, df$name), "Live", "Studio")
# List of attributes
attributes <- c("popularity", "energy", "tempo", "danceability")
# Create a separate plot for each attribute
for (attribute in attributes) {
df_filtered <- df %>%
select(artist, version, attribute)
# Generate the plot
p <- df_filtered %>%
ggplot(aes(x = version, y = !!sym(attribute), fill = version)) +
facet_wrap(~ artist, scales = "free") +
geom_violin(alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5, size = 1) +
scale_fill_manual(values = c("Studio" = "#1669da", "Live" = "#96d6de")) +
labs(
title = paste("Figure ", index(attribute),": Distribution of", attribute, "for Live vs. Studio Versions"),
x = "Version",
y = "Value",
fill = "Version"
) +
th +
theme(legend.position = "none")
print(p)
}
# Apply the is_live_version function to the 'name' column
df$version <- ifelse(mapply(is_live_version, df$name), "Live", "Studio")
# List of attributes
attributes <- c("popularity", "energy", "tempo", "danceability")
# Create a separate plot for each attribute
for (attribute in attributes) {
df_filtered <- df %>%
select(artist, version, attribute)
# Generate the plot
p <- df_filtered %>%
ggplot(aes(x = version, y = !!sym(attribute), fill = version)) +
facet_wrap(~ artist, scales = "free") +
geom_violin(alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5, size = 1) +
scale_fill_manual(values = c("Studio" = "#1669da", "Live" = "#96d6de")) +
labs(
title = paste("Figure ", attribute,": Distribution of", attribute, "for Live vs. Studio Versions"),
x = "Version",
y = "Value",
fill = "Version"
) +
th +
theme(legend.position = "none")
print(p)
}
# Apply the is_live_version function to the 'name' column
df$version <- ifelse(mapply(is_live_version, df$name), "Live", "Studio")
# List of attributes
attributes <- c("popularity", "energy", "tempo", "danceability")
# Create a separate plot for each attribute
for (i in 1:length(attributes)) {
attribute <- attributes[i]
figure_number <- i + 3
df_filtered <- df %>%
select(artist, version, {{ attribute }})
# Generate the plot
p <- df_filtered %>%
ggplot(aes(x = version, y = !!sym(attribute), fill = version)) +
facet_wrap(~ artist, scales = "free") +
geom_violin(alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5, size = 1) +
scale_fill_manual(values = c("Studio" = "#1669da", "Live" = "#96d6de")) +
labs(
title = paste("Figure", figure_number, ":", attribute, ": Distribution of", attribute, "for Live vs. Studio Versions"),
x = "Version",
y = "Value",
fill = "Version"
) +
th +
theme(legend.position = "none")
print(p)
}
# Apply the is_live_version function to the 'name' column
df$version <- ifelse(mapply(is_live_version, df$name), "Live", "Studio")
# List of attributes
attributes <- c("popularity", "energy", "tempo", "danceability")
# Create a separate plot for each attribute
for (i in 1:length(attributes)) {
attribute <- attributes[i]
figure_number <- i + 3
df_filtered <- df %>%
select(artist, version, {{ attribute }})
# Generate the plot
p <- df_filtered %>%
ggplot(aes(x = version, y = !!sym(attribute), fill = version)) +
facet_wrap(~ artist, scales = "free") +
geom_violin(alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5, size = 1) +
scale_fill_manual(values = c("Studio" = "#1669da", "Live" = "#96d6de")) +
labs(
title = paste("Figure", figure_number, ": Distribution of", attribute, "for Live vs. Studio Versions"),
x = "Version",
y = "Value",
fill = "Version"
) +
th +
theme(legend.position = "none")
print(p)
}
# Apply the is_live_version function to the 'name' column
df$version <- ifelse(mapply(is_live_version, df$name), "Live", "Studio")
# List of attributes
attributes <- c("popularity", "energy", "tempo", "danceability")
# Create a separate plot for each attribute
for (i in 1:length(attributes)) {
attribute <- attributes[i]
figure_number <- i + 3
df_filtered <- df %>%
select(artist, version, {{ attribute }})
# Generate the plot
p <- df_filtered %>%
ggplot(aes(x = version, y = !!sym(attribute), fill = version)) +
facet_wrap(~ artist, scales = "free") +
geom_violin(alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5, size = 1) +
scale_fill_manual(values = c("Studio" = "#1669da", "Live" = "#96d6de")) +
labs(
title = paste("Figure", figure_number, ": Distribution of", attribute, "for live vs. studio versions"),
x = "Version",
y = "Value",
fill = "Version"
) +
th +
theme(legend.position = "none")
print(p)
}
#   Housekeeping
setwd("/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/20713479-DatSci-Prac")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#   Clear environment
rm(list = ls())
options(scipen = 999)
#   Get external code
source("utilities/aesthetics.R") #  Get plot themes
source("utilities/convert_numeric.R")  # Convert multiple columns to numeric
#   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo,
rnaturalearth, rnaturalearthdata, sf, lwgeom, jtools)
#   Load Data
path <- "data/netflix/"
file <- "credits.csv"
df_credits <- read_csv(paste0(path, file))
file <- "titles.csv"
df_titles <- read_csv(paste0(path, file))
file <- "Movies.csv"
df_movies <- read_csv(paste0(path, file))
# Calculate genre distribution
genre_distribution <- df_titles %>%
group_by(Genre) %>%
summarise(Count = n())
View(df_titles)
# Calculate genre distribution
genre_distribution <- df_titles %>%
group_by(genres) %>%
summarise(Count = n())
View(genre_distribution)
# Calculate average audience score by genre
avg_score_genre <- df_movies %>%
group_by(Genre) %>%
summarise(AvgScore = mean(`Audience score %`, na.rm = TRUE)) %>%
arrange(desc(AvgScore)) %>%
head(10)
# Calculate genre distribution
genre_distribution <- df_titles %>%
group_by(genres) %>%
summarise(Count = n())
# Calculate average imdb score by genre
avg_score_genre <- df_movies %>%
group_by(Genre) %>%
summarise(AvgScore = mean(imdb_score, na.rm = TRUE)) %>%
arrange(desc(AvgScore)) %>%
head(10)
View(df_movies)
# Calculate average audience score by genre
avg_score_genre <- df_movies %>%
group_by(Genre) %>%
summarise(AvgScore = mean(`Audience score %`, na.rm = TRUE)) %>%
arrange(desc(AvgScore)) %>%
head(10)
# Calculate genre distribution
genre_distribution <- df_titles %>%
group_by(genres) %>%
summarise(Count = n())
# Calculate average audience score by genre
avg_score_genre <- df_movies %>%
group_by(Genre) %>%
summarise(AvgScore = mean(`Audience score %`, na.rm = TRUE)) %>%
arrange(desc(AvgScore)) %>%
head(10)
# Plot genre distribution
ggplot(genre_distribution, aes(x = reorder(Genre, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Genre", y = "Number of Titles", title = "Netflix Content Distribution by Genre")
# Calculate average audience score by actor
avg_score_actor <- actor_data %>%
group_by(name) %>%
summarise(AvgScore = mean(`Audience score %`, na.rm = TRUE)) %>%
arrange(desc(AvgScore)) %>%
head(10)
#   Housekeeping
setwd("/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/20713479-DatSci-Prac")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#   Clear environment
rm(list = ls())
options(scipen = 999)
#   Get external code
source("utilities/aesthetics.R") #  Get plot themes
source("utilities/convert_numeric.R")  # Convert multiple columns to numeric
#   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo,
rnaturalearth, rnaturalearthdata, sf, lwgeom, jtools)
#   Load Data
path <- "data/netflix/"
file <- "credits.csv"
df_credits <- read_csv(paste0(path, file))
file <- "titles.csv"
df_titles <- read_csv(paste0(path, file))
file <- "Movies.csv"
df_movies <- read_csv(paste0(path, file))
# Calculate genre distribution
genre_distribution <- df_titles %>%
group_by(genres) %>%
summarise(Count = n())
# Calculate average audience score by genre
avg_score_genre <- df_movies %>%
group_by(Genre) %>%
summarise(AvgScore = mean(`Audience score %`, na.rm = TRUE)) %>%
arrange(desc(AvgScore)) %>%
head(10)
View(df_credits)
View(df_movies)
View(df_titles)
View(df_credits)
View(df_titles)
# Extract the first genre from the list
df_titles$Main_Genre <- sapply(df_titles$Genre, function(x) unlist(fromJSON(x))[1])
# Extract the first genre from the list
df_titles$Main_Genre <- sapply(df_titles$genres, function(x) unlist(fromJSON(x))[1])
#   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo,
rnaturalearth, rnaturalearthdata, sf, lwgeom, jtools, jsonlite)
