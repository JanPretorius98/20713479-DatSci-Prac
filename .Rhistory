avg_score_genre <- df_movies %>%
group_by(Genre) %>%
summarise(AvgScore = mean(`Audience score %`, na.rm = TRUE)) %>%
arrange(desc(AvgScore)) %>%
head(10)
# Calculate average audience score by main genre
avg_score_genre <- df_movies %>%
group_by(Main_Genre) %>%
summarise(AvgScore = mean(`Audience score %`, na.rm = TRUE)) %>%
arrange(desc(AvgScore)) %>%
head(10)
# Calculate average audience score by main genre
avg_score_genre <- df_movies %>%
group_by(Genre) %>%
summarise(AvgScore = mean(`Audience score %`, na.rm = TRUE)) %>%
arrange(desc(AvgScore)) %>%
head(10)
names(df_movies)
# Calculate average audience score by main genre
avg_score_genre <- df_movies %>%
group_by(Genre) %>%
summarise(AvgScore = mean(`Audience  score %`, na.rm = TRUE)) %>%
arrange(desc(AvgScore)) %>%
head(10)
# Plot average audience score by main genre
ggplot(avg_score_genre, aes(x = reorder(Main_Genre, -AvgScore), y = AvgScore)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Main Genre", y = "Average Audience Score", title = "Average Audience Score by Main Genre")
# Plot average audience score by main genre
ggplot(avg_score_genre, aes(x = reorder(Main_Genre, -AvgScore), y = AvgScore)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Main Genre", y = "Average Audience Score", title = "Average Audience Score by Main Genre")
# Plot average audience score by main genre
ggplot(avg_score_genre, aes(x = reorder(Genre, -AvgScore), y = AvgScore)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Main Genre", y = "Average Audience Score", title = "Average Audience Score by Main Genre")
# Extract the first genre from the string
df_titles$Main_Genre <- str_extract(df_titles$genres, "^[^,]*")
df_titles$Main_Genre <- gsub("\\[|\\]|'", "", df_titles$Main_Genre)
# Genre distribution
genre_distribution <- df_titles %>%
group_by(Main_Genre) %>%
summarise(Count = n())
# Calculate average audience score by genre
avg_score_genre <- df_movies %>%
group_by(Genre) %>%
summarise(AvgScore = mean(`Audience score %`, na.rm = TRUE)) %>%
arrange(desc(AvgScore)) %>%
head(10)
# Extract the first genre from the string
df_titles$Main_Genre <- str_extract(df_titles$genres, "^[^,]*")
df_titles$Main_Genre <- gsub("\\[|\\]|'", "", df_titles$Main_Genre)
# Genre distribution
genre_distribution <- df_titles %>%
group_by(Main_Genre) %>%
summarise(Count = n())
# Calculate average audience score by main genre
avg_score_genre <- df_movies %>%
group_by(Genre) %>%
summarise(AvgScore = mean(`Audience  score %`, na.rm = TRUE)) %>%
arrange(desc(AvgScore)) %>%
head(10)
# Merge credits with movie data
actor_data <- merge(df_credits, df_movies, by.x = "id", by.y = "Film")
# Plot genre distribution
ggplot(genre_distribution, aes(x = reorder(Main_Genre, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Main Genre", y = "Number of Titles", title = "Netflix Content Distribution by Main Genre")
# Plot average audience score by main genre
ggplot(avg_score_genre, aes(x = reorder(Genre, -AvgScore), y = AvgScore)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Main Genre", y = "Average Audience Score", title = "Average Audience Score by Main Genre")
# Extract the first genre from the string
df_titles$Main_Genre <- str_extract(df_titles$genres, "^[^,]*")
df_titles$Main_Genre <- gsub("\\[|\\]|'", "", df_titles$Main_Genre)
# Genre distribution
genre_distribution <- df_titles %>%
group_by(Main_Genre) %>%
summarise(Count = n()) %>%
filter(Main_Genre != "")
# Calculate average audience score by main genre
avg_score_genre <- df_movies %>%
group_by(Genre) %>%
summarise(AvgScore = mean(`Audience  score %`, na.rm = TRUE)) %>%
arrange(desc(AvgScore)) %>%
head(10)
# Merge credits with movie data
actor_data <- merge(df_credits, df_movies, by.x = "id", by.y = "Film")
# Plot genre distribution
ggplot(genre_distribution, aes(x = reorder(Main_Genre, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Main Genre", y = "Number of Titles", title = "Netflix Content Distribution by Main Genre")
# Plot average audience score by main genre
ggplot(avg_score_genre, aes(x = reorder(Genre, -AvgScore), y = AvgScore)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Main Genre", y = "Average Audience Score", title = "Average Audience Score by Main Genre")
# Plot genre distribution
ggplot(genre_distribution, aes(x = reorder(Main_Genre, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "#dd5182") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
th +
labs(x = "Main Genre", y = "Number of Titles", title = "Netflix Content Distribution by Main Genre")
# Plot average audience score by main genre
ggplot(avg_score_genre, aes(x = reorder(Genre, -AvgScore), y = AvgScore)) +
geom_bar(stat = "identity", fill = "#dd5182") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
th +
labs(x = "Main Genre", y = "Average Audience Score", title = "Average Audience Score by Main Genre")
# Calculate average profitability, Rotten Tomatoes %, and Audience score % by film
film_data <- df_movies %>%
group_by(Film) %>%
summarise(AvgProfitability = mean(Profitability, na.rm = TRUE),
AvgRottenTomatoes = mean(`Rotten Tomatoes %`, na.rm = TRUE),
AvgAudienceScore = mean(`Audience score %`, na.rm = TRUE)) %>%
arrange(desc(AvgProfitability))
View(df_titles)
# Calculate average worldwide gross by main genre
avg_profit <- df_movies %>%
group_by(Genre) %>%
summarise(`Avg Profit` = mean(Profitability, na.rm = TRUE)) %>%
arrange(desc(`Avg Profit`))
# Print the table
print(avg_worldwide_gross_genre)
# Print the table
print(avg_profit)
# Calculate average worldwide gross and average audience score by main genre
avg_data_genre <- df_movies %>%
group_by(Genre) %>%
summarise(
`Avg Worldwide Gross` = mean(`Worldwide Gross`, na.rm = TRUE),
`Avg Profitability` = mean(`Profitability`, na.rm = TRUE)
) %>%
arrange(desc(`Avg Worldwide Gross`))
# Create the gt table
avg_data_genre %>%
gt() %>%
tab_header(
title = "Average Worldwide Gross and Audience Score by Genre"
) %>%
cols_label(
Main_Genre = "Main Genre",
AvgWorldwideGross = "Average Worldwide Gross",
AvgAudienceScore = "Average Audience Score"
)
# Create the gt table
avg_data_genre %>%
gt() %>%
tab_header(
title = "Average Worldwide Gross and Audience Score by Genre"
) %>%
cols_label(
Genre = "Main Genre",
`Avg Worldwide Gross` = "Average Worldwide Gross",
`Avg Profitability` = "Average Audience Score"
)
# Calculate average worldwide gross and average audience score by main genre
avg_data_genre <- df_movies %>%
group_by(Genre) %>%
summarise(
`Avg Worldwide Gross` = mean(`Worldwide Gross`, na.rm = TRUE),
`Avg Profitability` = mean(`Profitability`, na.rm = TRUE)
) %>%
arrange(desc(`Avg Worldwide Gross`))
# Create the gt table
avg_data_genre %>%
gt() %>%
tab_header(
title = "Average Worldwide Gross and Audience Score by Genre"
) %>%
cols_label(
Genre = "Main Genre",
`Avg Worldwide Gross` = "Average Worldwide Gross",
`Avg Profitability` = "Average Profitability"
)
#   Housekeeping
setwd("/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/20713479-DatSci-Prac")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#   Clear environment
rm(list = ls())
options(scipen = 999)
#   Get external code
source("utilities/aesthetics.R") #  Get plot themes
source("utilities/convert_numeric.R")  # Convert multiple columns to numeric
#   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo,
rnaturalearth, rnaturalearthdata, sf, lwgeom)
#   Load Data
path <- "data/googlePlay/"
file <- "googleplaystore_user_reviews.csv"
df_reviews <- read_csv(paste0(path, file))
file <- "googleplaystore.csv"
df_app <- read_csv(paste0(path, file))
# drop duplicates
df_reviews <- unique(df_reviews)
df_app <- unique(df_app)
# drop irrelevant columns (if any)
df_app <- df_app[ , !(names(df_app) %in% c('Current Ver', 'Android Ver'))]
df_reviews <- fill(df_reviews)  # fill forward
df_app <- na.omit(df_app)  # drop rows with missing values
df_app$'Last Updated' <- as.Date(df_app$'Last Updated', "%m/%d/%Y")
# Profit by category
profit_by_category <- df_app %>%
group_by(Category) %>%
summarise(Total_Profit = sum(Price))
View(df_app)
# drop duplicates
df_reviews <- unique(df_reviews)
df_app <- unique(df_app)
# drop irrelevant columns (if any)
df_app <- df_app[ , !(names(df_app) %in% c('Current Ver', 'Android Ver'))]
df_reviews <- fill(df_reviews)  # fill forward
df_app <- na.omit(df_app)  # drop rows with missing values
df_app$'Last Updated' <- as.Date(df_app$'Last Updated', "%m/%d/%Y")
df_app$Installs <- gsub("[^0-9.]", "", df_app$Installs)  # Remove non-numeric characters
df_app$Installs <- as.numeric(df_app$Installs)  # Convert to numeric
df_app$Price <- gsub("[^0-9.]", "", df_app$Price)  # Remove non-numeric characters
df_app$Price <- as.numeric(df_app$Price)  # Convert to numeric
# Profit by category
profit_by_category <- df_app %>%
group_by(Category) %>%
summarise(Total_Revenue = Price * Installs)
# Visualize profit by category
ggplot(profit_by_category, aes(x = Category, y = Total_Profit)) +
geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Profit by category
profit_by_category <- df_app %>%
group_by(Category) %>%
summarise(Total_Revenue = Price * Installs)
# Visualize profit by category
ggplot(profit_by_category, aes(x = Category, y = Total_Revenue)) +
geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
View(profit_by_category)
#   Housekeeping
setwd("/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/20713479-DatSci-Prac")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#   Clear environment
rm(list = ls())
options(scipen = 999)
#   Get external code
source("utilities/aesthetics.R") #  Get plot themes
source("utilities/convert_numeric.R")  # Convert multiple columns to numeric
#   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo,
rnaturalearth, rnaturalearthdata, sf, lwgeom)
#   Load Data
path <- "data/googlePlay/"
file <- "googleplaystore_user_reviews.csv"
df_reviews <- read_csv(paste0(path, file))
file <- "googleplaystore.csv"
df_app <- read_csv(paste0(path, file))
# drop duplicates
df_reviews <- unique(df_reviews)
df_app <- unique(df_app)
# drop irrelevant columns (if any)
df_app <- df_app[ , !(names(df_app) %in% c('Current Ver', 'Android Ver'))]
df_reviews <- fill(df_reviews)  # fill forward
df_app <- na.omit(df_app)  # drop rows with missing values
df_app$'Last Updated' <- as.Date(df_app$'Last Updated', "%m/%d/%Y")
df_app$Installs <- gsub("[^0-9.]", "", df_app$Installs)  # Remove non-numeric characters
df_app$Installs <- as.numeric(df_app$Installs)  # Convert to numeric
df_app$Price <- gsub("[^0-9.]", "", df_app$Price)  # Remove non-numeric characters
df_app$Price <- as.numeric(df_app$Price)  # Convert to numeric
View(df_app)
# Profit by category
profit_by_category <- df_app %>%
group_by(Category) %>%
summarise(Total_Revenue = Price * Installs)
View(profit_by_category)
# Profit by category
profit_by_category <- df_app %>%
group_by(Category) %>%
summarise(Total_Revenue = mean(Price * Installs))
View(profit_by_category)
# Visualize profit by category
ggplot(profit_by_category, aes(x = Category, y = Total_Revenue)) +
geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Profit by category
profit_by_category <- df_app %>%
group_by(Category) %>%
summarise(Total_Revenue = mean(Price * Installs))
# Order categories by Total_Revenue
profit_by_category <- profit_by_category %>%
arrange(desc(Total_Revenue))
# Visualize profit by category
ggplot(profit_by_category, aes(x = reorder(Category, -Total_Revenue), y = Total_Revenue)) +
geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab('Category')  # This line is added to rename the x-axis back to 'Category'
# Calculations
df_summary <- df_app %>%
group_by(Category) %>%
summarise(Mean_Size = mean(Size, na.rm = TRUE),
Total_Revenue = mean(Price * Installs))
# Create the table
gt_table <- df_summary %>%
gt() %>%
tab_header(
title = "Mean App Size and Total Revenue by Category"
) %>%
cols_label(
Category = "Category",
Mean_Size = "Mean App Size",
Total_Revenue = "Mean Total Revenue"
)
print(gt_table)
# drop duplicates
df_reviews <- unique(df_reviews)
df_app <- unique(df_app)
# drop irrelevant columns (if any)
df_app <- df_app[ , !(names(df_app) %in% c('Current Ver', 'Android Ver'))]
df_reviews <- fill(df_reviews)  # fill forward
df_app <- na.omit(df_app)  # drop rows with missing values
df_app$'Last Updated' <- as.Date(df_app$'Last Updated', "%m/%d/%Y")
df_app$Installs <- gsub("[^0-9.]", "", df_app$Installs)  # Remove non-numeric characters
df_app$Installs <- as.numeric(df_app$Installs)  # Convert to numeric
df_app$Price <- gsub("[^0-9.]", "", df_app$Price)  # Remove non-numeric characters
df_app$Price <- as.numeric(df_app$Price)  # Convert to numeric
# Convert Size to numeric (in MB)
df_app$Size <- gsub("M", "", df_app$Size)  # Remove 'M'
df_app$Size <- ifelse(grepl("k", df_app$Size), as.numeric(gsub("k", "", df_app$Size))/1024, as.numeric(df_app$Size))  # Convert 'k' to 'M'
# Profit by category
profit_by_category <- df_app %>%
group_by(Category) %>%
summarise(Total_Revenue = mean(Price * Installs))
# Order categories by Total_Revenue
profit_by_category <- profit_by_category %>%
arrange(desc(Total_Revenue))
# Visualize profit by category
ggplot(profit_by_category, aes(x = reorder(Category, -Total_Revenue), y = Total_Revenue)) +
geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab('Category')  # This line is added to rename the x-axis back to 'Category'
#   Housekeeping
setwd("/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/20713479-DatSci-Prac")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#   Clear environment
rm(list = ls())
options(scipen = 999)
#   Get external code
source("utilities/aesthetics.R") #  Get plot themes
source("utilities/convert_numeric.R")  # Convert multiple columns to numeric
#   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo,
rnaturalearth, rnaturalearthdata, sf, lwgeom)
#   Load Data
path <- "data/googlePlay/"
file <- "googleplaystore_user_reviews.csv"
df_reviews <- read_csv(paste0(path, file))
file <- "googleplaystore.csv"
df_app <- read_csv(paste0(path, file))
# drop duplicates
df_reviews <- unique(df_reviews)
df_app <- unique(df_app)
# drop irrelevant columns (if any)
df_app <- df_app[ , !(names(df_app) %in% c('Current Ver', 'Android Ver'))]
df_reviews <- fill(df_reviews)  # fill forward
df_app <- na.omit(df_app)  # drop rows with missing values
df_app$'Last Updated' <- as.Date(df_app$'Last Updated', "%m/%d/%Y")
df_app$Installs <- gsub("[^0-9.]", "", df_app$Installs)  # Remove non-numeric characters
df_app$Installs <- as.numeric(df_app$Installs)  # Convert to numeric
df_app$Price <- gsub("[^0-9.]", "", df_app$Price)  # Remove non-numeric characters
df_app$Price <- as.numeric(df_app$Price)  # Convert to numeric
# Convert Size to numeric (in MB)
df_app$Size <- gsub("M", "", df_app$Size)  # Remove 'M'
df_app$Size <- ifelse(grepl("k", df_app$Size), as.numeric(gsub("k", "", df_app$Size))/1024, as.numeric(df_app$Size))  # Convert 'k' to 'M'
# Profit by category
profit_by_category <- df_app %>%
group_by(Category) %>%
summarise(Total_Revenue = mean(Price * Installs))
# Order categories by Total_Revenue
profit_by_category <- profit_by_category %>%
arrange(desc(Total_Revenue))
# Visualize profit by category
ggplot(profit_by_category, aes(x = reorder(Category, -Total_Revenue), y = Total_Revenue)) +
geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab('Category')  # This line is added to rename the x-axis back to 'Category'
# Calculations
df_summary <- df_app %>%
mutate(Size = as.numeric(Size))
group_by(Category) %>%
summarise(Mean_Size = mean(Size, na.rm = TRUE),
Total_Revenue = mean(Price * Installs))
# Calculations
df_summary <- df_app %>%
group_by(Category) %>%
summarise(Mean_Size = mean(Size, na.rm = TRUE),
Total_Revenue = mean(Price * Installs))
# Create the table
gt_table <- df_summary %>%
gt() %>%
tab_header(
title = "Mean App Size and Total Revenue by Category"
) %>%
cols_label(
Category = "Category",
Mean_Size = "Mean App Size (MB)",
Total_Revenue = "Mean Total Revenue"
)
print(gt_table)
# Calculations
df_summary <- df_app %>%
group_by(Category) %>%
summarise(Mean_Size = mean(Size, na.rm = TRUE),
Total_Revenue = mean(Price * Installs))
df_summary <- df_summary %>%
arrange(desc(Mean_Size))
# Create the table
gt_table <- df_summary %>%
gt() %>%
tab_header(
title = "Mean App Size and Total Revenue by Category"
) %>%
cols_label(
Category = "Category",
Mean_Size = "Mean App Size (MB)",
Total_Revenue = "Mean Total Revenue"
)
print(gt_table)
# Visualize profit by category
ggplot(profit_by_category, aes(x = reorder(Category, -Total_Revenue), y = Total_Revenue)) +
geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab('Category') +
th
# Visualize profit by category
ggplot(profit_by_category, aes(x = reorder(Category, -Total_Revenue), y = Total_Revenue)) +
geom_bar(stat = 'identity', fill = "#2AAA74") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab('Category') +
th
# Calculations
df_summary <- df_app %>%
group_by(Category) %>%
summarise(Mean_Size = mean(Size, na.rm = TRUE),
Total_Revenue = mean(Price * Installs))
df_summary <- df_summary %>%
arrange(desc(Mean_Size))
# Create the table
gt_table <- df_summary %>%
gt() %>%
tab_header(
title = "Mean App Size and Total Revenue by Category"
) %>%
cols_label(
Category = "Category",
Mean_Size = "Mean App Size (MB)",
Total_Revenue = "Mean Total Revenue"
)
print(gt_table)
gt_table
# Profit by category
profit_by_category <- df_app %>%
group_by(Category) %>%
summarise(Total_Revenue = mean(Price * Installs))
# Order categories by Total_Revenue
profit_by_category <- profit_by_category %>%
arrange(Total_Revenue)
# Visualize profit by category
ggplot(profit_by_category, aes(x = Total_Revenue, y = reorder(Category, Total_Revenue))) +
geom_bar(stat = 'identity', fill = "#2AAA74", width = 0.5) +
theme_minimal() +
theme(axis.text.y = element_text(size = 8),
plot.margin = margin(1, 1, 1, 1, "cm")) +
xlab('Total Revenue') +
ylab('Category')
# Profit by category
profit_by_category <- df_app %>%
group_by(Category) %>%
summarise(Total_Revenue = mean(Price * Installs))
# Order categories by Total_Revenue
profit_by_category <- profit_by_category %>%
arrange(Total_Revenue)
# Visualize profit by category as a lollipop plot
ggplot(profit_by_category, aes(x = Total_Revenue, y = reorder(Category, Total_Revenue))) +
geom_point(size = 3, color = "#2AAA74") +
geom_segment(aes(x = 0, xend = Total_Revenue, yend = reorder(Category, Total_Revenue)),
color = "#2AAA74", size = 1) +
theme_minimal() +
theme(axis.text.y = element_text(size = 8),
plot.margin = margin(1, 1, 1, 1, "cm")) +
xlab('Total Revenue') +
ylab('Category')
# Profit by category
profit_by_category <- df_app %>%
group_by(Category) %>%
summarise(Total_Revenue = mean(Price * Installs))
# Order categories by Total_Revenue
profit_by_category <- profit_by_category %>%
arrange(Total_Revenue)
# Visualize profit by category as a lollipop plot
ggplot(profit_by_category, aes(x = Total_Revenue, y = reorder(Category, Total_Revenue))) +
geom_point(size = 3, color = "#2AAA74") +
geom_segment(aes(x = 0, xend = Total_Revenue, yend = reorder(Category, Total_Revenue)),
color = "#2AAA74", size = 1) +
theme_minimal() +
theme(axis.text.y = element_text(size = 8)) +
xlab('Total Revenue') +
ylab('Category')
