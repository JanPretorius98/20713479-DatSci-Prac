avg_new_deaths_per_million = mean(new_deaths_per_million, na.rm = TRUE))
df_covid_2021_Q4 <- df_covid %>%
filter(between(month(date), 10, 12), year(date) == 2021) %>%
group_by(location) %>%
summarize(avg_people_vaccinated_per_hundred = mean(people_vaccinated_per_hundred, na.rm = TRUE),
avg_new_deaths_per_million = mean(new_deaths_per_million, na.rm = TRUE))
# Merge the map data with the COVID-19 data
world_2021_Q1 <- left_join(world_map, df_covid_2021_Q1, by = c("name" = "location"))
world_2021_Q4 <- left_join(world_map, df_covid_2021_Q4, by = c("name" = "location"))
# Define a function to create a choropleth map
create_map <- function(df, title) {
# Compute the representative points for each country
points <- st_point_on_surface(st_geometry(df))
# Add the longitude and latitude of the representative points to the data frame
df$lon <- st_coordinates(points)[,1]
df$lat <- st_coordinates(points)[,2]
# Create the plot
ggplot(data = df) +
geom_sf(aes(fill = avg_new_deaths_per_million)) +
geom_point(aes(x = lon, y = lat, size = avg_people_vaccinated_per_hundred), color = "#dd5182", alpha = 0.6) +
scale_fill_gradientn(colors = c("#003f5c", "#444e86", "#955196", "#dd5182", "#ff6e54", "#ffa600"),
na.value = "white",
name = "Total Deaths per Million",
limits = c(0, 20)) +  # Adjust the limits as per your desired range
scale_size_continuous(guide = "none", range = c(1, 4), name = "People Vaccinated per Hundred") +
th +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
legend.position = "bottom") +
ggtitle(title)
}
# Create the maps
map_2021Q1 <- create_map(world_2021_Q1, "COVID-19 Outcomes and People Vaccinated per Hundred (2021-Q1)*")
map_2021Q4 <- create_map(world_2021_Q4, "COVID-19 Outcomes and People Vaccinated per Hundred (2021-Q4)*")
map_2021Q1 <- map_2021Q1 +
labs(subtitle = "Top panel represents choropleth and bubble plot of COVID-19 related deaths. Size of bubble relate to number of people vaccinated per 100.")
map_2021Q4 <- map_2021Q4 +
labs(caption = "*Calculated as quarterly average.")
# Print the maps
print(map_2021Q1)
print(map_2021Q4)
# Load the map data
world_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(admin != "Antarctica")
# Filter COVID-19 data for the specific dates and calculate quarterly averages
df_covid_2021_Q1 <- df_covid %>%
filter(between(month(date), 1, 3), year(date) == 2021) %>%
group_by(location) %>%
summarize(avg_people_vaccinated_per_hundred = mean(people_vaccinated_per_hundred, na.rm = TRUE),
avg_new_deaths_per_million = mean(new_deaths_per_million, na.rm = TRUE))
df_covid_2021_Q4 <- df_covid %>%
filter(between(month(date), 10, 12), year(date) == 2021) %>%
group_by(location) %>%
summarize(avg_people_vaccinated_per_hundred = mean(people_vaccinated_per_hundred, na.rm = TRUE),
avg_new_deaths_per_million = mean(new_deaths_per_million, na.rm = TRUE))
# Merge the map data with the COVID-19 data
world_2021_Q1 <- left_join(world_map, df_covid_2021_Q1, by = c("name" = "location"))
world_2021_Q4 <- left_join(world_map, df_covid_2021_Q4, by = c("name" = "location"))
# Define a function to create a choropleth map
create_map <- function(df, title) {
# Compute the representative points for each country
points <- st_point_on_surface(st_geometry(df))
# Add the longitude and latitude of the representative points to the data frame
df$lon <- st_coordinates(points)[,1]
df$lat <- st_coordinates(points)[,2]
# Create the plot
ggplot(data = df) +
geom_sf(aes(fill = avg_new_deaths_per_million)) +
geom_point(aes(x = lon, y = lat, size = avg_people_vaccinated_per_hundred), color = "#dd5182", alpha = 0.6) +
scale_fill_gradientn(colors = c("#003f5c", "#444e86", "#955196", "#dd5182", "#ff6e54", "#ffa600"),
na.value = "white",
name = "Total Deaths per Million",
limits = c(0, 20)) +  # Adjust the limits as per your desired range
scale_size_continuous(guide = "none", range = c(1, 4), name = "People Vaccinated per Hundred") +
th +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
legend.position = "bottom") +
ggtitle(title)
}
# Create the maps
map_2021Q1 <- create_map(world_2021_Q1, "COVID-19 Outcomes and People Vaccinated per Hundred (2021-Q1)*")
map_2021Q4 <- create_map(world_2021_Q4, "COVID-19 Outcomes and People Vaccinated per Hundred (2021-Q4)*")
map_2021Q1 <- map_2021Q1 +
labs(subtitle = "Top panel represents choropleth and bubble plot of COVID-19 related deaths. Size of bubble relate to number of people vaccinated per 100.") +
theme(legend.position = "none")
map_2021Q4 <- map_2021Q4 +
labs(caption = "*Calculated as quarterly average.")
# Print the maps
print(map_2021Q1)
print(map_2021Q4)
# Load the map data
world_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(admin != "Antarctica")
# Filter COVID-19 data for the specific dates and calculate quarterly averages
df_covid_2021_Q1 <- df_covid %>%
filter(between(month(date), 1, 3), year(date) == 2021) %>%
group_by(location) %>%
summarize(avg_people_vaccinated_per_hundred = mean(people_vaccinated_per_hundred, na.rm = TRUE),
avg_new_deaths_per_million = mean(new_deaths_per_million, na.rm = TRUE))
df_covid_2021_Q4 <- df_covid %>%
filter(between(month(date), 10, 12), year(date) == 2021) %>%
group_by(location) %>%
summarize(avg_people_vaccinated_per_hundred = mean(people_vaccinated_per_hundred, na.rm = TRUE),
avg_new_deaths_per_million = mean(new_deaths_per_million, na.rm = TRUE))
# Merge the map data with the COVID-19 data
world_2021_Q1 <- left_join(world_map, df_covid_2021_Q1, by = c("name" = "location"))
world_2021_Q4 <- left_join(world_map, df_covid_2021_Q4, by = c("name" = "location"))
# Define a function to create a choropleth map
create_map <- function(df, title) {
# Compute the representative points for each country
points <- st_point_on_surface(st_geometry(df))
# Add the longitude and latitude of the representative points to the data frame
df$lon <- st_coordinates(points)[,1]
df$lat <- st_coordinates(points)[,2]
# Create the plot
ggplot(data = df) +
geom_sf(aes(fill = avg_new_deaths_per_million)) +
geom_point(aes(x = lon, y = lat, size = avg_people_vaccinated_per_hundred), color = "#dd5182", alpha = 0.6) +
scale_fill_gradientn(colors = c("#003f5c", "#444e86", "#955196", "#dd5182", "#ff6e54", "#ffa600"),
na.value = "white",
name = "Total Deaths per Million",
limits = c(0, 20)) +  # Adjust the limits as per your desired range
scale_size_continuous(guide = "none", range = c(1, 4), name = "People Vaccinated per Hundred") +
th +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
legend.position = "bottom",
plot.margin = margin(0, 0, 0, 0)) +
ggtitle(title)
}
# Create the maps
map_2021Q1 <- create_map(world_2021_Q1, "COVID-19 Outcomes and People Vaccinated per Hundred (2021-Q1)*")
map_2021Q4 <- create_map(world_2021_Q4, "COVID-19 Outcomes and People Vaccinated per Hundred (2021-Q4)*")
map_2021Q1 <- map_2021Q1 +
labs(subtitle = "Top panel represents choropleth and bubble plot of COVID-19 related deaths. Size of bubble relate to number of people vaccinated per 100.") +
theme(legend.position = "none")
map_2021Q4 <- map_2021Q4 +
labs(caption = "*Calculated as quarterly average.")
# Print the maps
print(map_2021Q1)
print(map_2021Q4)
# Load the map data
world_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(admin != "Antarctica")
# Filter COVID-19 data for the specific dates and calculate quarterly averages
df_covid_2021_Q1 <- df_covid %>%
filter(between(month(date), 1, 3), year(date) == 2021) %>%
group_by(location) %>%
summarize(avg_people_vaccinated_per_hundred = mean(people_vaccinated_per_hundred, na.rm = TRUE),
avg_new_deaths_per_million = mean(new_deaths_per_million, na.rm = TRUE))
df_covid_2021_Q4 <- df_covid %>%
filter(between(month(date), 10, 12), year(date) == 2021) %>%
group_by(location) %>%
summarize(avg_people_vaccinated_per_hundred = mean(people_vaccinated_per_hundred, na.rm = TRUE),
avg_new_deaths_per_million = mean(new_deaths_per_million, na.rm = TRUE))
# Merge the map data with the COVID-19 data
world_2021_Q1 <- left_join(world_map, df_covid_2021_Q1, by = c("name" = "location"))
world_2021_Q4 <- left_join(world_map, df_covid_2021_Q4, by = c("name" = "location"))
# Define a function to create a choropleth map
create_map <- function(df, title) {
# Compute the representative points for each country
points <- st_point_on_surface(st_geometry(df))
# Add the longitude and latitude of the representative points to the data frame
df$lon <- st_coordinates(points)[,1]
df$lat <- st_coordinates(points)[,2]
# Create the plot
ggplot(data = df) +
geom_sf(aes(fill = avg_new_deaths_per_million)) +
geom_point(aes(x = lon, y = lat, size = avg_people_vaccinated_per_hundred), color = "#dd5182", alpha = 0.6) +
scale_fill_gradientn(colors = c("#003f5c", "#444e86", "#955196", "#dd5182", "#ff6e54", "#ffa600"),
na.value = "white",
name = "Total Deaths per Million",
limits = c(0, 20)) +  # Adjust the limits as per your desired range
scale_size_continuous(guide = "none", range = c(1, 4), name = "People Vaccinated per Hundred") +
th +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
legend.position = "bottom",
plot.margin = margin(0, 0, 0, 0)) +
ggtitle(title)
}
# Create the maps
map_2021Q1 <- create_map(world_2021_Q1, "COVID-19 Outcomes and People Vaccinated per Hundred*")
map_2021Q4 <- create_map(world_2021_Q4, "")
map_2021Q1 <- map_2021Q1 +
labs(subtitle = "Top panel (2021-Q1) and bottom panel (2021-Q4) represent choropleth and bubble plots of COVID-19 related deaths.\nSize of bubble relate to number of people vaccinated per 100.") +
theme(legend.position = "none")
map_2021Q4 <- map_2021Q4 +
labs(caption = "*Calculated as quarterly average.")
# Print the maps
print(map_2021Q1)
print(map_2021Q4)
# Load the map data
world_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(admin != "Antarctica")
# Filter COVID-19 data for the specific dates and calculate quarterly averages
df_covid_2021_Q1 <- df_covid %>%
filter(between(month(date), 1, 3), year(date) == 2021) %>%
group_by(location) %>%
summarize(avg_people_vaccinated_per_hundred = mean(people_vaccinated_per_hundred, na.rm = TRUE),
avg_new_deaths_per_million = mean(new_deaths_per_million, na.rm = TRUE))
df_covid_2021_Q4 <- df_covid %>%
filter(between(month(date), 10, 12), year(date) == 2021) %>%
group_by(location) %>%
summarize(avg_people_vaccinated_per_hundred = mean(people_vaccinated_per_hundred, na.rm = TRUE),
avg_new_deaths_per_million = mean(new_deaths_per_million, na.rm = TRUE))
# Merge the map data with the COVID-19 data
world_2021_Q1 <- left_join(world_map, df_covid_2021_Q1, by = c("name" = "location"))
world_2021_Q4 <- left_join(world_map, df_covid_2021_Q4, by = c("name" = "location"))
# Define a function to create a choropleth map
create_map <- function(df) {
# Compute the representative points for each country
points <- st_point_on_surface(st_geometry(df))
# Add the longitude and latitude of the representative points to the data frame
df$lon <- st_coordinates(points)[,1]
df$lat <- st_coordinates(points)[,2]
# Create the plot
ggplot(data = df) +
geom_sf(aes(fill = avg_new_deaths_per_million)) +
geom_point(aes(x = lon, y = lat, size = avg_people_vaccinated_per_hundred), color = "#dd5182", alpha = 0.6) +
scale_fill_gradientn(colors = c("#003f5c", "#444e86", "#955196", "#dd5182", "#ff6e54", "#ffa600"),
na.value = "white",
name = "Total Deaths per Million",
limits = c(0, 20)) +  # Adjust the limits as per your desired range
scale_size_continuous(guide = "none", range = c(1, 4), name = "People Vaccinated per Hundred") +
th +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
legend.position = "bottom",
plot.margin = margin(0, 0, 0, 0))
}
# Create the maps
map_2021Q1 <- create_map(world_2021_Q1)
map_2021Q4 <- create_map(world_2021_Q4)
map_2021Q1 <- map_2021Q1 +
labs(title = "Figure 5: COVID-19 Outcomes and People Vaccinated per Hundred*",
subtitle = "Top panel (2021-Q1) and bottom panel (2021-Q4) represent choropleth and bubble plots of COVID-19 related deaths.\nSize of bubble relate to number of people vaccinated per 100.") +
theme(legend.position = "none")
map_2021Q4 <- map_2021Q4 +
labs(caption = "*Calculated as quarterly average.")
# Print the maps
print(map_2021Q1)
print(map_2021Q4)
# Load the map data
world_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(admin != "Antarctica")
# Filter COVID-19 data for the specific dates and calculate quarterly averages
df_covid_2021_Q1 <- df_covid %>%
filter(between(month(date), 1, 3), year(date) == 2021) %>%
group_by(location) %>%
summarize(avg_people_vaccinated_per_hundred = mean(people_vaccinated_per_hundred, na.rm = TRUE),
avg_new_deaths_per_million = mean(new_deaths_per_million, na.rm = TRUE))
df_covid_2021_Q4 <- df_covid %>%
filter(between(month(date), 10, 12), year(date) == 2021) %>%
group_by(location) %>%
summarize(avg_people_vaccinated_per_hundred = mean(people_vaccinated_per_hundred, na.rm = TRUE),
avg_new_deaths_per_million = mean(new_deaths_per_million, na.rm = TRUE))
# Merge the map data with the COVID-19 data
world_2021_Q1 <- left_join(world_map, df_covid_2021_Q1, by = c("name" = "location"))
world_2021_Q4 <- left_join(world_map, df_covid_2021_Q4, by = c("name" = "location"))
# Define a function to create a choropleth map
create_map <- function(df) {
# Compute the representative points for each country
points <- st_point_on_surface(st_geometry(df))
# Add the longitude and latitude of the representative points to the data frame
df$lon <- st_coordinates(points)[,1]
df$lat <- st_coordinates(points)[,2]
# Create the plot
ggplot(data = df) +
geom_sf(aes(fill = avg_new_deaths_per_million)) +
geom_point(aes(x = lon, y = lat, size = avg_people_vaccinated_per_hundred), color = "#dd5182", alpha = 0.6) +
scale_fill_gradientn(colors = c("#003f5c", "#444e86", "#955196", "#dd5182", "#ff6e54", "#ffa600"),
na.value = "white",
name = "Total Deaths per Million",
limits = c(0, 20)) +  # Adjust the limits as per your desired range
scale_size_continuous(guide = "none", range = c(1, 4), name = "People Vaccinated per Hundred") +
th +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
legend.position = "bottom",
plot.margin = margin(0, 0, 0, 0))
}
# Create the maps
map_2021Q1 <- create_map(world_2021_Q1)
map_2021Q4 <- create_map(world_2021_Q4)
map_2021Q1 <- map_2021Q1 +
labs(title = "Figure 5: COVID-19 Outcomes and People Vaccinated per Hundred*",
subtitle = "Top panel (2021-Q1) and bottom panel (2021-Q4) represent choropleth and bubble plots of COVID-19 related deaths.\nSizes of bubbles relate to number of people vaccinated per 100.") +
theme(legend.position = "none",
plot.title = element_text(size=16))
map_2021Q4 <- map_2021Q4 +
labs(caption = "*Calculated as quarterly average.")
# Print the maps
print(map_2021Q1)
print(map_2021Q4)
View(df_covid)
View(df_deaths)
# Create the scatter plot
scatter_plot <- ggplot(df_covid, aes(x = population_density, y = new_cases_smoothed)) +
geom_point() +
labs(x = "Population Density", y = "New Cases Smoothed") +
ggtitle("Scatter Plot of Population Density and New Cases Smoothed")
# Display the scatter plot
print(scatter_plot)
# Create the scatter plot
scatter_plot <- ggplot(df_covid, aes(x = population_density, y = new_cases)) +
geom_point() +
labs(x = "Population Density", y = "New Cases Smoothed") +
ggtitle("Scatter Plot of Population Density and New Cases Smoothed")
# Display the scatter plot
print(scatter_plot)
# Create the scatter plot
scatter_plot <- ggplot(df_covid, aes(x = stringency_index, y = new_cases)) +
geom_point() +
labs(x = "Population Density", y = "New Cases Smoothed") +
ggtitle("Scatter Plot of Population Density and New Cases Smoothed")
# Display the scatter plot
print(scatter_plot)
# Create the scatter plot
scatter_plot <- ggplot(df_covid, aes(x = stringency_index, y = new_cases)) +
geom_point() +
labs(x = "Stringency Index", y = "New Cases Smoothed") +
ggtitle("Scatter Plot of Population Density and New Cases Smoothed")
# Display the scatter plot
print(scatter_plot)
# Create the scatter plot
df_covid %>%
filter(new_cases < 1000000) %>%
ggplot(aes(x = stringency_index, y = new_cases)) +
geom_point() +
labs(x = "Stringency Index", y = "New Cases") +
ggtitle("Scatter Plot of Stringency and New Cases")
# Categorize stringency index
df_covid <- df_covid %>%
mutate(stringency_category = case_when(
stringency_index <= 0.25 ~ "Low",
stringency_index <= 0.5 ~ "Low Medium",
stringency_index <= 0.75 ~ "High Medium",
TRUE ~ "High"
))
# Calculate mean new cases for each category
mean_new_cases <- df_covid %>%
group_by(stringency_category) %>%
summarize(mean_new_cases = mean(new_cases, na.rm = TRUE))
# Create the line plot
line_plot <- ggplot(df_covid, aes(x = date, y = new_cases, color = stringency_category)) +
geom_line() +
labs(x = "Date", y = "New Cases", color = "Stringency Category") +
ggtitle("Line Plot of New Cases over Time by Stringency Category") +
scale_color_manual(values = c("Low" = "blue", "Low Medium" = "green", "High Medium" = "orange", "High" = "red"))
# Display the line plot and mean new cases
print(line_plot)
print(mean_new_cases)
# Categorize stringency index
df_covid <- df_covid %>%
mutate(stringency_category = case_when(
stringency_index <= 0.25 ~ "Low",
stringency_index <= 0.5 ~ "Low Medium",
stringency_index <= 0.75 ~ "High Medium",
TRUE ~ "High"
))
View(df_covid)
# Categorize stringency index
df_covid <- df_covid %>%
mutate(stringency_category = case_when(
stringency_index <= 0.25 ~ "Low",
stringency_index <= 0.5 ~ "Low Medium",
stringency_index <= 0.75 ~ "High Medium",
TRUE ~ "High"
))
# Calculate mean new cases for each category
mean_new_cases <- df_covid %>%
group_by(stringency_category) %>%
summarize(mean_new_cases = mean(new_cases, na.rm = TRUE))
View(mean_new_cases)
# Categorize stringency index
df_covid <- df_covid %>%
mutate(stringency_category = case_when(
stringency_index <= 0.25 ~ "Low",
stringency_index <= 0.5 ~ "Low Medium",
stringency_index <= 0.75 ~ "High Medium",
TRUE ~ "High"
))
# Calculate mean new cases for each category
mean_new_cases <- df_covid %>%
group_by(stringency_category, date) %>%
summarize(mean_new_cases = mean(new_cases, na.rm = TRUE))
# Create the line plot
line_plot <- ggplot(df_covid, aes(x = date, y = new_cases, color = stringency_category)) +
geom_line() +
labs(x = "Date", y = "New Cases", color = "Stringency Category") +
ggtitle("Line Plot of New Cases over Time by Stringency Category") +
scale_color_manual(values = c("Low" = "blue", "Low Medium" = "green", "High Medium" = "orange", "High" = "red"))
# Display the line plot and mean new cases
print(line_plot)
print(mean_new_cases)
#   Housekeeping
setwd("/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/20713479-DatSci-Prac")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#   Clear environment
rm(list = ls())
options(scipen = 999)
#   Get external code
source("utilities/aesthetics.R") #  Get plot themes
#   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo,
rnaturalearth, rnaturalearthdata, sf, lwgeom)
#   Load Data
path <- "data/Covid/"
file <- "Deaths_by_cause.csv"
df_deaths <- read_csv(paste0(path, file))
file <- "owid-covid-data.csv"
df_covid <- read_csv(paste0(path, file))
View(df_covid)
# Create data frame with cumulative vaccinations by date for each continent
df_vaccinations <- df_covid %>%
filter(!is.na(continent)) %>%
group_by(continent, date) %>%
summarize(total_vaccinations_per_hundred = sum(new_people_vaccinationed_smooth_per_hundred, na.rm = TRUE), .groups = "drop") %>%
arrange(continent, date) %>%
group_by(continent) %>%
mutate(vaccination_7day_avg = rollmean(total_vaccinations_per_hundred, 7, fill = NA, align = "right"))
#   Housekeeping
setwd("/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/20713479-DatSci-Prac")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#   Clear environment
rm(list = ls())
options(scipen = 999)
#   Get external code
source("utilities/aesthetics.R") #  Get plot themes
#   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo,
rnaturalearth, rnaturalearthdata, sf, lwgeom)
#   Load Data
path <- "data/Covid/"
file <- "Deaths_by_cause.csv"
df_deaths <- read_csv(paste0(path, file))
file <- "owid-covid-data.csv"
df_covid <- read_csv(paste0(path, file))
#   Aggregate the data
df_covid_continent <- df_covid %>%
filter(!is.na(continent)) %>%
group_by(date, continent) %>%
summarize(
new_cases_per_million = sum(new_cases_per_million, na.rm = TRUE),
new_deaths_per_million = sum(new_deaths_per_million, na.rm = TRUE),
new_deaths = sum(new_deaths, na.rm = TRUE),
new_cases = sum(new_cases, na.rm = TRUE),
total_deaths = sum(new_deaths, na.rm = TRUE),
total_cases = sum(new_cases, na.rm = TRUE),
new_cases_smoothed = sum(new_cases_smoothed, na.rm = TRUE),
new_deaths_smoothed = sum(new_deaths_smoothed, na.rm = TRUE),
.groups = "drop"
)
#   Convert data from wide to long format
df_covid_long <- df_covid_continent %>%
pivot_longer(cols = c(new_cases_per_million, new_deaths_per_million, new_cases, new_deaths, new_cases_smoothed, new_deaths_smoothed), names_to = "category", values_to = "count")
# Create custom labels for facets
custom_labels <- as_labeller(c(new_cases_per_million = "New Cases (per million)", new_deaths_per_million = "New Deaths (per million)"))
#   Aggregate the data
df_covid_continent <- df_covid %>%
filter(!is.na(continent)) %>%
group_by(date, continent) %>%
summarize(
new_cases_per_million = sum(new_cases_per_million, na.rm = TRUE),
new_deaths_per_million = sum(new_deaths_per_million, na.rm = TRUE),
new_deaths = sum(new_deaths, na.rm = TRUE),
new_cases = sum(new_cases, na.rm = TRUE),
total_deaths = sum(new_deaths, na.rm = TRUE),
total_cases = sum(new_cases, na.rm = TRUE),
new_cases_smoothed = sum(new_cases_smoothed, na.rm = TRUE),
new_deaths_smoothed = sum(new_deaths_smoothed, na.rm = TRUE),
.groups = "drop"
)
#   Convert data from wide to long format
df_covid_long <- df_covid_continent %>%
pivot_longer(cols = c(new_cases_per_million, new_deaths_per_million, new_cases, new_deaths, new_cases_smoothed, new_deaths_smoothed), names_to = "category", values_to = "count")
# Create custom labels for facets
custom_labels <- as_labeller(c(new_cases_per_million = "New Cases (per million)", new_deaths_per_million = "New Deaths (per million)"))
#   Housekeeping
setwd("/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/20713479-DatSci-Prac")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#   Clear environment
rm(list = ls())
options(scipen = 999)
#   Get external code
source("utilities/aesthetics.R") #  Get plot themes
#   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo,
rnaturalearth, rnaturalearthdata, sf, lwgeom)
#   Load Data
path <- "data/Covid/"
file <- "Deaths_by_cause.csv"
df_deaths <- read_csv(paste0(path, file))
file <- "owid-covid-data.csv"
df_covid <- read_csv(paste0(path, file))
