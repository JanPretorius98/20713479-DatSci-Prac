# Render the table with kable and kable_styling
table <- df_wide %>%
kable(row.names = TRUE,
caption = 'Table of COVID-19 Death Proportions by Continent',
format = "html",
booktabs = T) %>%
kable_styling(full_width = T,
latex_options = c("striped",
"scale_down",
"HOLD_position"),
font_size = 13)
# Print the table
table
# Aggregate the data and calculate cumulative cases and deaths
df_covid_cumulative <- df_covid %>%
filter(!is.na(continent)) %>%
group_by(continent, date) %>%
summarise(
new_cases = sum(new_cases, na.rm = TRUE),
new_deaths = sum(new_deaths, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(continent, date) %>%
group_by(continent) %>%
mutate(
total_cases = cumsum(new_cases),
total_deaths = cumsum(new_deaths),
death_proportion = total_deaths / total_cases
)
# Convert from wide to long format for plotting
df_prop <- df_covid_cumulative %>%
pivot_longer(cols = c(total_cases, total_deaths, death_proportion), names_to = "category", values_to = "count")
# Filter to include only death_proportion
df_prop_deaths <- df_prop %>%
filter(category == "death_proportion")
# Define the dates of interest
dates_of_interest <- as.Date(c("2020-06-01", "2020-12-01", "2021-06-01", "2021-12-01", "2022-06-01"))
# Filter data for specific months
df_covid_filtered <- df_covid %>%
filter(floor_date(date, "month") %in% dates_of_interest)
# Calculate the sum of deaths and cases for each continent and month
df_summaries <- df_covid_filtered %>%
group_by(continent, date = floor_date(date, "month")) %>%
summarise(total_deaths = sum(new_deaths, na.rm = TRUE),
total_cases = sum(new_cases, na.rm = TRUE),
.groups = "drop") %>%
mutate(death_proportion = total_deaths / total_cases)
# Pivot wider to get continents as columns
df_wide <- df_summaries %>%
pivot_wider(names_from = continent, values_from = death_proportion)
# Convert date to character for display purposes
df_wide$date <- as.character(df_wide$date)
# Render the table with kable and kable_styling
table <- df_wide %>%
kable(row.names = TRUE,
caption = 'Table of COVID-19 Death Proportions by Continent',
format = "html",
booktabs = T) %>%
kable_styling(full_width = T,
latex_options = c("striped",
"scale_down",
"HOLD_position"),
font_size = 13)
# Print the table
table
View(df_wide)
# Aggregate the data and calculate cumulative cases and deaths
df_covid_cumulative <- df_covid %>%
filter(!is.na(continent)) %>%
group_by(continent, date) %>%
summarise(
new_cases = sum(new_cases, na.rm = TRUE),
new_deaths = sum(new_deaths, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(continent, date) %>%
group_by(continent) %>%
mutate(
total_cases = cumsum(new_cases),
total_deaths = cumsum(new_deaths),
death_proportion = total_deaths / total_cases
)
# Convert from wide to long format for plotting
df_prop <- df_covid_cumulative %>%
pivot_longer(cols = c(total_cases, total_deaths, death_proportion), names_to = "category", values_to = "count")
# Filter to include only death_proportion
df_prop_deaths <- df_prop %>%
filter(category == "death_proportion")
# Define the months of interest
months_of_interest <- as.Date(c("2020-06-01", "2020-12-01", "2021-06-01", "2021-12-01", "2022-06-01"))
# Calculate the sum of deaths and cases for each continent and month
df_summaries <- df_covid %>%
group_by(continent, date = floor_date(date, "month")) %>%
summarise(total_deaths = sum(new_deaths, na.rm = TRUE),
total_cases = sum(new_cases, na.rm = TRUE),
.groups = "drop") %>%
mutate(death_proportion = total_deaths / total_cases) %>%
filter(date %in% months_of_interest)
# Pivot wider to get months as columns
df_wide <- df_summaries %>%
pivot_wider(names_from = date, values_from = death_proportion)
# Convert date to character for display purposes
names(df_wide)[-1] <- as.character(months_of_interest)
# Render the table with kable and kable_styling
table <- df_wide %>%
kable(row.names = TRUE,
caption = 'Table of COVID-19 Death Proportions by Continent',
format = "html",
booktabs = T) %>%
kable_styling(full_width = T,
latex_options = c("striped",
"scale_down",
"HOLD_position"),
font_size = 13)
# Print the table
table
# Aggregate the data and calculate cumulative cases and deaths
df_covid_cumulative <- df_covid %>%
filter(!is.na(continent)) %>%
group_by(continent, date) %>%
summarise(
new_cases = sum(new_cases, na.rm = TRUE),
new_deaths = sum(new_deaths, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(continent, date) %>%
group_by(continent) %>%
mutate(
total_cases = cumsum(new_cases),
total_deaths = cumsum(new_deaths),
death_proportion = total_deaths / total_cases
)
# Convert from wide to long format for plotting
df_prop <- df_covid_cumulative %>%
pivot_longer(cols = c(total_cases, total_deaths, death_proportion), names_to = "category", values_to = "count")
# Filter to include only death_proportion
df_prop_deaths <- df_prop %>%
filter(category == "death_proportion")
# Define the months of interest
months_of_interest <- as.Date(c("2020-06-01", "2020-12-01", "2021-06-01", "2021-12-01", "2022-06-01"))
# Calculate the sum of deaths and cases for each continent and month
df_summaries <- df_covid %>%
group_by(continent, date = floor_date(date, "month")) %>%
summarize(total_deaths = sum(new_deaths, na.rm = TRUE),
total_cases = sum(new_cases, na.rm = TRUE),
.groups = "drop") %>%
mutate(death_proportion = total_deaths / total_cases) %>%
filter(date %in% months_of_interest)
# Pivot wider to get months as columns
df_wide <- df_summaries %>%
tidyr::spread(key = date, value = death_proportion)
# Convert date to character for display purposes
names(df_wide)[-1] <- as.character(months_of_interest)
# Render the table with kable and kable_styling
table <- df_wide %>%
kable(row.names = TRUE,
caption = 'Table of COVID-19 Death Proportions by Continent',
format = "html",
booktabs = T) %>%
kable_styling(full_width = T,
latex_options = c("striped",
"scale_down",
"HOLD_position"),
font_size = 13)
# Print the table
table
# Aggregate the data and calculate cumulative cases and deaths
df_covid_cumulative <- df_covid %>%
filter(!is.na(continent)) %>%
group_by(continent, date) %>%
summarise(
new_cases = sum(new_cases, na.rm = TRUE),
new_deaths = sum(new_deaths, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(continent, date) %>%
group_by(continent) %>%
mutate(
total_cases = cumsum(new_cases),
total_deaths = cumsum(new_deaths),
death_proportion = total_deaths / total_cases
)
# Convert from wide to long format for plotting
df_prop <- df_covid_cumulative %>%
pivot_longer(cols = c(total_cases, total_deaths, death_proportion), names_to = "category", values_to = "count")
# Filter to include only death_proportion
df_prop_deaths <- df_prop %>%
filter(category == "death_proportion")
# Define the months of interest
months_of_interest <- as.Date(c("2020-06-01", "2020-12-01", "2021-06-01", "2021-12-01", "2022-06-01"))
# Calculate the sum of deaths and cases for each continent and month
df_summaries <- df_covid %>%
group_by(continent, date = floor_date(date, "month")) %>%
summarize(total_deaths = sum(new_deaths, na.rm = TRUE),
total_cases = sum(new_cases, na.rm = TRUE),
.groups = "drop") %>%
mutate(death_proportion = total_deaths / total_cases) %>%
filter(date %in% months_of_interest)
# Pivot wider to get months as columns
df_wide <- df_summaries %>%
pivot_wider(names_from = date, values_from = death_proportion, values_fill = NA)
# Convert date to character for display purposes
names(df_wide)[-1] <- as.character(months_of_interest)
# Render the table with kable and kable_styling
table <- df_wide %>%
kable(row.names = TRUE,
caption = 'Table of COVID-19 Death Proportions by Continent',
format = "html",
booktabs = T) %>%
kable_styling(full_width = T,
latex_options = c("striped",
"scale_down",
"HOLD_position"),
font_size = 13)
# Print the table
table
# Aggregate the data and calculate cumulative cases and deaths
df_covid_cumulative <- df_covid %>%
filter(!is.na(continent)) %>%
group_by(continent, date) %>%
summarise(
new_cases = sum(new_cases, na.rm = TRUE),
new_deaths = sum(new_deaths, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(continent, date) %>%
group_by(continent) %>%
mutate(
total_cases = cumsum(new_cases),
total_deaths = cumsum(new_deaths),
death_proportion = total_deaths / total_cases
)
# Convert from wide to long format for plotting
df_prop <- df_covid_cumulative %>%
pivot_longer(cols = c(total_cases, total_deaths, death_proportion), names_to = "category", values_to = "count")
# Filter to include only death_proportion
df_prop_deaths <- df_prop %>%
filter(category == "death_proportion")
# Define the months of interest
months_of_interest <- as.Date(c("2020-06-01", "2020-12-01", "2021-06-01", "2021-12-01", "2022-06-01"))
# Calculate the sum of deaths and cases for each continent and month
df_summaries <- df_covid %>%
group_by(continent, date = floor_date(date, "month")) %>%
summarize(total_deaths = sum(new_deaths, na.rm = TRUE),
total_cases = sum(new_cases, na.rm = TRUE),
.groups = "drop") %>%
mutate(death_proportion = total_deaths / total_cases) %>%
filter(date %in% months_of_interest)
# Pivot wider to get months as columns
df_wide <- df_summaries %>%
pivot_wider(names_from = continent, values_from = death_proportion, values_fill = NA)
# Render the table with kable and kable_styling
table <- df_wide %>%
mutate(date = as.character(date)) %>%
kable(row.names = FALSE,
caption = 'Table of COVID-19 Death Proportions by Continent',
format = "html",
booktabs = T) %>%
kable_styling(full_width = T,
latex_options = c("striped",
"scale_down",
"HOLD_position"),
font_size = 13)
# Print the table
table
# Aggregate the data and calculate cumulative cases and deaths
df_covid_cumulative <- df_covid %>%
filter(!is.na(continent)) %>%
group_by(continent, date) %>%
summarise(
new_cases = sum(new_cases, na.rm = TRUE),
new_deaths = sum(new_deaths, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(continent, date) %>%
group_by(continent) %>%
mutate(
total_cases = cumsum(new_cases),
total_deaths = cumsum(new_deaths),
death_proportion = total_deaths / total_cases
)
# Convert from wide to long format for plotting
df_prop <- df_covid_cumulative %>%
pivot_longer(cols = c(total_cases, total_deaths, death_proportion), names_to = "category", values_to = "count")
# Filter to include only death_proportion
df_prop_deaths <- df_prop %>%
filter(category == "death_proportion")
# Define the months of interest
months_of_interest <- as.Date(c("2020-06-01", "2020-12-01", "2021-06-01", "2021-12-01", "2022-06-01"))
# Calculate the sum of deaths and cases for each continent and month
df_summaries <- df_covid %>%
group_by(date = floor_date(date, "month")) %>%
summarize(across(where(is.character), first, na.rm = TRUE),
total_deaths = sum(new_deaths, na.rm = TRUE),
total_cases = sum(new_cases, na.rm = TRUE),
.groups = "drop") %>%
mutate(death_proportion = total_deaths / total_cases) %>%
filter(date %in% months_of_interest)
# Aggregate the data and calculate cumulative cases and deaths
df_covid_cumulative <- df_covid %>%
filter(!is.na(continent)) %>%
group_by(continent, date) %>%
summarise(
new_cases = sum(new_cases, na.rm = TRUE),
new_deaths = sum(new_deaths, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(continent, date) %>%
group_by(continent) %>%
mutate(
total_cases = cumsum(new_cases),
total_deaths = cumsum(new_deaths),
death_proportion = total_deaths / total_cases
)
# Convert from wide to long format for plotting
df_prop <- df_covid_cumulative %>%
pivot_longer(cols = c(total_cases, total_deaths, death_proportion), names_to = "category", values_to = "count")
# Filter to include only death_proportion
df_prop_deaths <- df_prop %>%
filter(category == "death_proportion")
# Define the months of interest
months_of_interest <- as.Date(c("2020-06-01", "2020-12-01", "2021-06-01", "2021-12-01", "2022-06-01"))
# Calculate the sum of deaths and cases for each continent and month
df_summaries <- df_covid %>%
group_by(continent, date = floor_date(date, "month")) %>%
summarize(total_deaths = sum(new_deaths, na.rm = TRUE),
total_cases = sum(new_cases, na.rm = TRUE),
.groups = "drop") %>%
mutate(death_proportion = total_deaths / total_cases) %>%
filter(date %in% months_of_interest)
# Pivot wider to get continents as columns
df_wide <- df_summaries %>%
pivot_wider(names_from = continent, values_from = death_proportion, values_fill = NA)
# Convert date to character for display purposes
df_wide <- df_wide %>%
mutate(date = as.character(date))
# Render the table with kable and kable_styling
table <- df_wide %>%
kable(row.names = FALSE,
caption = 'Table of COVID-19 Death Proportions by Continent',
format = "html",
booktabs = T) %>%
kable_styling(full_width = T,
latex_options = c("striped",
"scale_down",
"HOLD_position"),
font_size = 13)
# Print the table
table
# Aggregate the data and calculate cumulative cases and deaths
df_covid_cumulative <- df_covid %>%
filter(!is.na(continent)) %>%
group_by(continent, date) %>%
summarise(
new_cases = sum(new_cases, na.rm = TRUE),
new_deaths = sum(new_deaths, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(continent, date) %>%
group_by(continent) %>%
mutate(
total_cases = cumsum(new_cases),
total_deaths = cumsum(new_deaths),
death_proportion = total_deaths / total_cases
)
# Convert from wide to long format for plotting
df_prop <- df_covid_cumulative %>%
pivot_longer(cols = c(total_cases, total_deaths, death_proportion), names_to = "category", values_to = "count")
# Filter to include only death_proportion
df_prop_deaths <- df_prop %>%
filter(category == "death_proportion")
# Define the months of interest
months_of_interest <- as.Date(c("2020-06-01", "2020-12-01", "2021-06-01", "2021-12-01", "2022-06-01"))
# Calculate the sum of deaths and cases for each continent and month
df_summaries <- df_covid %>%
group_by(continent, date = floor_date(date, "month")) %>%
summarize(total_deaths = sum(new_deaths, na.rm = TRUE),
total_cases = sum(new_cases, na.rm = TRUE),
.groups = "drop") %>%
mutate(death_proportion = total_deaths / total_cases) %>%
filter(date %in% months_of_interest)
# Filter to include only death_proportion and the dates of interest
df_summaries <- df_covid_cumulative %>%
filter(date %in% months_of_interest) %>%
select(date, continent, death_proportion)
# Pivot wider to get continents as columns
df_wide <- df_summaries %>%
pivot_wider(names_from = continent, values_from = death_proportion)
# Convert date to character for display purposes
df_wide <- df_wide %>%
mutate(date = as.character(date))
# Render the table with kable and kable_styling
table <- df_wide %>%
kable(row.names = FALSE,
caption = 'Table of COVID-19 Death Proportions by Continent',
format = "html",
booktabs = T) %>%
kable_styling(full_width = T,
latex_options = c("striped",
"scale_down",
"HOLD_position"),
font_size = 13)
# Print the table
table
# Render the table with kable and kable_styling
table <- kable(df_wide, row.names = TRUE,
caption = 'Table with kable() and kablestyling()',
format = "html", booktabs = T) %>%
kable_styling(full_width = T,
latex_options = c("striped",
"scale_down",
"HOLD_position"),
font_size = 13)
# Print the table
table
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
pacman::p_load(modelsummary, gt, knitr, kableExtra, tidyverse)
data <- mtcars[1:5,] %>% tibble::as_tibble()
View(data)
df_covid <- convert_to_numeric(df_covid, 5)
#   Aggregate the data
df_covid_continent <- df_covid %>%
filter(!is.na(continent)) %>%
group_by(date, continent) %>%
summarize(
new_cases_per_million = sum(new_cases_per_million, na.rm = TRUE),
new_deaths_per_million = sum(new_deaths_per_million, na.rm = TRUE),
new_deaths = sum(new_deaths, na.rm = TRUE),
new_cases = sum(new_cases, na.rm = TRUE),
total_deaths = sum(new_deaths, na.rm = TRUE),
total_cases = sum(new_cases, na.rm = TRUE),
new_cases_smoothed = sum(new_cases_smoothed, na.rm = TRUE),
new_deaths_smoothed = sum(new_deaths_smoothed, na.rm = TRUE),
.groups = "drop"
)
#   Convert data from wide to long format
df_covid_long <- df_covid_continent %>%
pivot_longer(cols = c(new_cases_per_million, new_deaths_per_million, new_cases, new_deaths, new_cases_smoothed, new_deaths_smoothed), names_to = "category", values_to = "count")
# Create custom labels for facets
custom_labels <- as_labeller(c(new_cases_per_million = "New Cases (per million)", new_deaths_per_million = "New Deaths (per million)"))
# Create a faceted streamgraph
df_covid_long %>%
filter(category == "new_cases_per_million" | category == "new_deaths_per_million") %>%
ggplot(aes(x = date, y = count, fill = continent)) +
geom_stream() +
scale_fill_manual(values = palette) +
facet_wrap(~ category, scales = "free", ncol = 1, labeller = custom_labels) +
th +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x.top = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom") +
labs(title = "Figure 1: COVID-19 cases and deaths over time by continent",
subtitle = "Top panel represents daily new cases. Bottom panel represents daily new deaths.",
x = "",
y = "Count",
fill = "Continent")
# Aggregate the data and calculate cumulative cases and deaths
df_covid_cumulative <- df_covid %>%
filter(!is.na(continent)) %>%
group_by(continent, date) %>%
summarise(
new_cases = sum(new_cases, na.rm = TRUE),
new_deaths = sum(new_deaths, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(continent, date) %>%
group_by(continent) %>%
mutate(
total_cases = cumsum(new_cases),
total_deaths = cumsum(new_deaths),
death_proportion = total_deaths / total_cases
)
# Convert from wide to long format for plotting
df_prop <- df_covid_cumulative %>%
pivot_longer(cols = c(total_cases, total_deaths, death_proportion), names_to = "category", values_to = "count")
# Filter to include only death_proportion
df_prop_deaths <- df_prop %>%
filter(category == "death_proportion")
# Define the months of interest
months_of_interest <- as.Date(c("2020-06-01", "2020-12-01", "2021-06-01", "2021-12-01", "2022-06-01"))
# Calculate the sum of deaths and cases for each continent and month
df_summaries <- df_covid %>%
group_by(continent, date = floor_date(date, "month")) %>%
summarize(total_deaths = sum(new_deaths, na.rm = TRUE),
total_cases = sum(new_cases, na.rm = TRUE),
.groups = "drop") %>%
mutate(death_proportion = total_deaths / total_cases) %>%
filter(date %in% months_of_interest)
# Filter to include only death_proportion and the dates of interest
df_summaries <- df_covid_cumulative %>%
filter(date %in% months_of_interest) %>%
select(date, continent, death_proportion)
# Pivot wider to get continents as columns
df_wide <- df_summaries %>%
pivot_wider(names_from = continent, values_from = death_proportion)
# Convert date to character for display purposes
df_wide <- df_wide %>%
mutate(date = as.character(date))
# Render the table with kable and kable_styling
table <- kable(df_wide, row.names = TRUE,
caption = 'Table with kable() and kablestyling()',
format = "html", booktabs = T) %>%
kable_styling(full_width = T,
latex_options = c("striped",
"scale_down",
"HOLD_position"),
font_size = 13)
# Print the table
table
