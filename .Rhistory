geom_jitter(shape = 16, size = 0.5, alpha = 0.3, color = "#003f5c") +
labs(title = "Invest in an umbrella.",
subtitle = "Rain cloud plot of precipitation. The plot shows the distribution of rainfall,\nwith each drop presenting the rainfall observed in that day.",
x = "",
y = "Precipitation",
caption = "London is a rainy place, and this umbrella plot showcases just how rainy.") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
scale_y_continuous(labels = abs) + th +
theme(axis.text.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
print(rain_cloud_plot)
# Create a new data frame for rainy days
df_rainy <- df_london %>%
filter(precipitation > 0)
# Make the precipitation values negative
df_rainy$precipitation <- -df_rainy$precipitation
# Create the plot
rain_cloud_plot <- ggplot(df_rainy, aes(x = 1, y = precipitation)) +
geom_violin(trim = FALSE, fill="#96d6de") +
#geom_boxplot(width = 0.1, fill="white", color = "black") +
geom_jitter(shape = 16, size = 0.5, alpha = 0.3, color = "#003f5c") +
labs(title = "Invest in an umbrella.",
subtitle = "Rain cloud plot of precipitation. The plot shows the distribution of rainfall,\nwith each drop presenting the precipitation observed in that day.",
x = "",
y = "Precipitation",
caption = "London is a rainy place, and this umbrella plot showcases just how rainy.") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
scale_y_continuous(labels = abs) + th +
theme(axis.text.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
print(rain_cloud_plot)
# Calculate the mean temperature
df_london_temp <- df_london %>%
filter(!is.na(mean_temp))
mean_temperature <- round(mean(df_london_temp$mean_temp), 2)
# Create the plot
ggplot(df_london_temp, aes(x = mean_temp, y = month, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
scale_fill_gradientn(colors = palette2) +
geom_vline(xintercept = mean_temperature, linetype = "dashed", color = "black") +
theme_ridges() +
th +
labs(title = "How cold is London throughout the year?",
x = "Temperature (째C)",
y = "Month",
subtitle = paste0("Dashed line represents the mean temperature in London (", mean_temperature, " 째C)"))
df_london$date <- as.Date(as.character(df_london$date), format = "%Y%m%d")
df_london$month <- month(df_london$date, label=TRUE) # Create a new column for months
# Calculate the mean temperature
df_london_temp <- df_london %>%
filter(!is.na(mean_temp))
mean_temperature <- round(mean(df_london_temp$mean_temp), 2)
# Create the plot
ggplot(df_london_temp, aes(x = mean_temp, y = month, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
scale_fill_gradientn(colors = palette2) +
geom_vline(xintercept = mean_temperature, linetype = "dashed", color = "black") +
theme_ridges() +
th +
labs(title = "How cold is London throughout the year?",
x = "Temperature (째C)",
y = "Month",
subtitle = paste0("Dashed line represents the mean temperature in London (", mean_temperature, " 째C)"))
# Create a new data frame for rainy days
df_rainy <- df_london %>%
filter(precipitation > 0)
# Make the precipitation values negative
df_rainy$precipitation <- -df_rainy$precipitation
# Create the plot
rain_cloud_plot <- ggplot(df_rainy, aes(x = 1, y = precipitation)) +
geom_violin(trim = FALSE, fill="#96d6de") +
#geom_boxplot(width = 0.1, fill="white", color = "black") +
geom_jitter(shape = 16, size = 0.5, alpha = 0.3, color = "#003f5c") +
labs(title = "Invest in an umbrella.",
subtitle = "Rain cloud plot of precipitation. The plot shows the distribution of rainfall,\nwith each drop presenting the precipitation observed in that day.",
x = "",
y = "Precipitation",
caption = "London is a rainy place, and this umbrella plot showcases just how rainy.") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
scale_y_continuous(labels = abs) + th +
theme(axis.text.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
print(rain_cloud_plot)
# Filter the data to remove NA values
df_london_clean <- df_london %>%
filter(!is.na(cloud_cover) & !is.na(sunshine))
# Create the plot
combined_plot <- ggplot(df_london_clean) +
geom_jitter(aes(x = 1, y = -sunshine), shape = 16, size = 0.5, alpha = 0.3, color = "#d69e1e") +
geom_jitter(aes(x = 1, y = -cloud_cover), shape = 16, size = 0.5, alpha = 0.3, color = "#696969") +
labs(title = "Cloud Cover and Sunshine Plot", x = "", y = "Weather Indicator") +
th +
theme(axis.text.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
print(combined_plot)
# Filter the data to remove NA values
df_london_clean <- df_london %>%
filter(!is.na(cloud_cover) & !is.na(sunshine))
# Create the plot for sunshine
sunshine_plot <- ggplot(df_london_clean, aes(x = sunshine)) +
geom_density(fill="#d69e1e", alpha=0.3) +
labs(title = "Density Plot of Sunshine", x = "Sunshine", y = "Density") +
th
print(sunshine_plot)
# Create the plot for cloud cover
cloud_cover_plot <- ggplot(df_london_clean, aes(x = cloud_cover)) +
geom_density(fill="#696969", alpha=0.3) +
labs(title = "Density Plot of Cloud Cover", x = "Cloud Cover", y = "Density") +
th
print(cloud_cover_plot)
# Filter the data to remove NA values
df_london_clean <- df_london %>%
filter(!is.na(cloud_cover) & !is.na(sunshine))
# Create the combined plot
combined_density_plot <- ggplot(df_london_clean) +
geom_density(aes(x = sunshine), fill = "#d69e1e", alpha = 0.3) +
geom_density(aes(x = cloud_cover), fill = "#696969", alpha = 0.3) +
labs(title = "Density Plots of Sunshine and Cloud Cover", x = "Value", y = "Density") +
th
print(combined_density_plot)
# Filter the data to remove NA values
df_london_clean <- df_london %>%
filter(!is.na(cloud_cover) & !is.na(sunshine))
# Create the combined plot with smoothing
combined_density_plot <- ggplot(df_london_clean) +
geom_density(aes(x = sunshine), fill = "#d69e1e", alpha = 0.3) +
stat_smooth(aes(x = cloud_cover, y = ..density..), geom = "line", color = "#696969", method = 'loess') +
labs(title = "Density Plots of Sunshine and Cloud Cover", x = "Value", y = "Density") +
th
print(combined_density_plot)
# Filter the data to remove NA values
df_london_clean <- df_london %>%
filter(!is.na(cloud_cover) & !is.na(sunshine))
# Create the combined plot
combined_density_plot <- ggplot(df_london_clean) +
geom_density(aes(x = sunshine), fill = "#d69e1e", alpha = 0.3) +
geom_density(aes(x = cloud_cover), fill = "#696969", alpha = 0.3) +
labs(title = "Density Plots of Sunshine and Cloud Cover", x = "Value", y = "Density") +
th
print(combined_density_plot)
# Create a new date column in the correct format
df_london$date_formatted <- as.Date(as.character(df_london$date), format = "%Y%m%d")
# Filter the data to remove NA values
df_london_clean <- df_london %>%
filter(!is.na(cloud_cover))
# Create the plot
cloud_cover_plot <- ggplot(df_london_clean, aes(x = date_formatted, y = cloud_cover)) +
geom_line(alpha = 0.3, color = "#696969") +
geom_smooth(method = 'loess', color = "blue") +
labs(title = "Cloud Cover in London Over Time", x = "Date", y = "Cloud Cover") +
theme_classic()
print(cloud_cover_plot)
# Create a new date column in the correct format
df_london$date_formatted <- as.Date(as.character(df_london$date), format = "%Y%m%d")
# Filter the data to remove NA values
df_london_clean <- df_london %>%
filter(!is.na(cloud_cover))
# Create the plot
cloud_cover_plot <- ggplot(df_london_clean, aes(x = date_formatted, y = cloud_cover)) +
geom_line(alpha = 0.3, color = "#696969") +
labs(title = "Cloud Cover in London Over Time", x = "Date", y = "Cloud Cover") +
theme_classic()
print(cloud_cover_plot)
View(df_london)
# Filter the data to remove NA values
df_london_clean <- df_london %>%
filter(!is.na(cloud_cover))
# Create the plot
cloud_cover_plot <- ggplot(df_london_clean, aes(x = date, y = cloud_cover)) +
geom_line(alpha = 0.3, color = "#696969") +
labs(title = "Cloud Cover in London Over Time", x = "Date", y = "Cloud Cover") +
theme_classic()
print(cloud_cover_plot)
# Create additional time-related variables
df_london <- df_london %>%
mutate(year = year(date_formatted),
day_of_year = yday(date_formatted))
# Filter the data to remove NA values
df_london_clean <- df_london %>%
filter(!is.na(mean_temp))
# Calculate the mean temperature for each day of the year
df_temp <- df_london_clean %>%
group_by(day_of_year) %>%
summarise(mean_temp = mean(mean_temp))
# Create the radial plot
p <- ggplot(df_temp, aes(x = day_of_year, y = mean_temp)) +
coord_polar(start = 0) +
geom_line(color = "blue") +
theme_void() +
labs(title = "Radial Plot of Mean Temperature",
subtitle = "Each point on the line represents a day of the year")
print(p)
# Calculate the monthly averages of the variables of interest
df_monthly_avg <- df_london %>%
group_by(month) %>%
summarise(mean_temp = mean(mean_temp, na.rm = TRUE),
cloud_cover = mean(cloud_cover, na.rm = TRUE),
sunshine = mean(sunshine, na.rm = TRUE),
precipitation = mean(precipitation, na.rm = TRUE))
# Normalize the data
df_monthly_avg_normalized <- as.data.frame(lapply(df_monthly_avg[, -1], scale))
# Add the month names back into the normalized data frame
df_monthly_avg_normalized$month <- month.abb
# Add a row for max values (necessary for the radarchart function)
df_for_radar <- rbind(rep(1, ncol(df_monthly_avg_normalized) - 1), df_monthly_avg_normalized)
# Create the radar chart
radarchart(df_for_radar, axistype = 1,
pcol = rainbow(4), plwd = 2, plty = 1,
title = "Weather Radial Chart for London",
vlcex = 0.8)
#   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo,
rnaturalearth, rnaturalearthdata, sf, lwgeom, jtools, fmsb)
# Calculate the monthly averages of the variables of interest
df_monthly_avg <- df_london %>%
group_by(month) %>%
summarise(mean_temp = mean(mean_temp, na.rm = TRUE),
cloud_cover = mean(cloud_cover, na.rm = TRUE),
sunshine = mean(sunshine, na.rm = TRUE),
precipitation = mean(precipitation, na.rm = TRUE))
# Normalize the data
df_monthly_avg_normalized <- as.data.frame(lapply(df_monthly_avg[, -1], scale))
# Add the month names back into the normalized data frame
df_monthly_avg_normalized$month <- month.abb
# Add a row for max values (necessary for the radarchart function)
df_for_radar <- rbind(rep(1, ncol(df_monthly_avg_normalized) - 1), df_monthly_avg_normalized)
# Create the radar chart
radarchart(df_for_radar, axistype = 1,
pcol = rainbow(4), plwd = 2, plty = 1,
title = "Weather Radial Chart for London",
vlcex = 0.8)
View(df_monthly_avg)
View(df_monthly_avg_normalized)
df_for_radar$month <- ymd(df_for_radar$month)
# Calculate the monthly averages of the variables of interest
df_monthly_avg <- df_london %>%
group_by(month) %>%
summarise(mean_temp = mean(mean_temp, na.rm = TRUE),
cloud_cover = mean(cloud_cover, na.rm = TRUE),
sunshine = mean(sunshine, na.rm = TRUE),
precipitation = mean(precipitation, na.rm = TRUE))
# Normalize the data
df_monthly_avg_normalized <- as.data.frame(lapply(df_monthly_avg[, -1], scale))
# Add the month names back into the normalized data frame
df_monthly_avg_normalized$month <- month.abb
# Add a row for max values (necessary for the radarchart function)
df_for_radar <- rbind(rep(1, ncol(df_monthly_avg_normalized) - 1), df_monthly_avg_normalized)
# Create the streamgraph
plt <- ggplot(df_monthly_avg_normalized, aes(x = month, y = mean_temp, fill = month)) +
geom_area(position = "stack") +
scale_fill_manual(values = palette) +
labs(title = "Monthly Average Temperature Streamgraph",
x = "Month",
y = "Normalized Mean Temperature") +
theme_minimal()
# Print the streamgraph
print(plt)
# Calculate the monthly averages of the variables of interest
df_monthly_avg <- df_london %>%
group_by(month) %>%
summarise(mean_temp = mean(mean_temp, na.rm = TRUE),
cloud_cover = mean(cloud_cover, na.rm = TRUE),
sunshine = mean(sunshine, na.rm = TRUE),
precipitation = mean(precipitation, na.rm = TRUE))
# Normalize the data
df_monthly_avg_normalized <- as.data.frame(lapply(df_monthly_avg[, -1], scale))
# Add the month names back into the normalized data frame
df_monthly_avg_normalized$month <- month.abb
# Create a streamgraph
df_monthly_avg_normalized %>%
filter(category == "new_cases_per_million" | category == "new_deaths_per_million") %>%
ggplot(aes(x = date, y = count, fill = continent)) +
geom_stream(show.legend = FALSE) +
scale_fill_manual(values = palette) +
th +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
labs(title = "COVID-19 cases and deaths over time by continent",
subtitle = "Streamgraph representation of daily new cases and new deaths",
x = "Date",
y = "Count",
fill = "Continent")
# Convert date to a Date object (if not already)
df_london$Date <- as.Date(df_london$date)
# Create a daily heatmap
ggplot(df_london, aes(x = Date, y = cloud_cover, fill = sunshine)) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(title = "Daily Heatmap of Cloud Cover and Sunshine",
x = "Date",
y = "Cloud Cover",
fill = "Sunshine") +
theme_minimal()
# Create a daily heatmap
ggplot(df_london, aes(x = Date, y = cloud_cover, fill = sunshine)) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(title = "Daily Heatmap of Cloud Cover and Sunshine",
x = "Date",
y = "Cloud Cover",
fill = "Sunshine") +
th
#   Housekeeping
setwd("/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/20713479-DatSci-Prac")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#   Clear environment
rm(list = ls())
options(scipen = 999)
#   Get external code
source("utilities/aesthetics.R") #  Get plot themes
source("utilities/convert_numeric.R")  # Convert multiple columns to numeric
#   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo,
rnaturalearth, rnaturalearthdata, sf, lwgeom, jtools)
#   Load Data
path <- "data/London/"
file <- "london_weather.csv"
df_london <- read_csv(paste0(path, file))
file <- "UKMonthly_Detailed.csv"
df_uk <- read_csv(paste0(path, file))
# Filter the data to remove NA values
df_london_clean <- df_london %>%
filter(!is.na(cloud_cover) & !is.na(sunshine))
# Create the combined plot
combined_density_plot <- ggplot(df_london_clean) +
geom_density(aes(x = sunshine), fill = "#d69e1e", alpha = 0.3) +
geom_density(aes(x = cloud_cover), fill = "#696969", alpha = 0.3) +
labs(title = "Density Plots of Sunshine and Cloud Cover", x = "Value", y = "Density") +
th
print(combined_density_plot)
# Filter the data to remove NA values
df_london_clean <- df_london %>%
filter(!is.na(cloud_cover) & !is.na(sunshine))
# Create the combined plot
combined_density_plot <- ggplot(df_london_clean) +
#geom_density(aes(x = sunshine), fill = "#d69e1e", alpha = 0.3) +
geom_density(aes(x = cloud_cover), fill = "#696969", alpha = 0.3) +
labs(title = "Density Plots of Sunshine and Cloud Cover", x = "Value", y = "Density") +
th
print(combined_density_plot)
# Filter the data to remove NA values
df_london_clean <- df_london %>%
filter(!is.na(cloud_cover) & !is.na(sunshine))
# Create the combined plot
combined_area_plot <- ggplot(df_london_clean) +
geom_area(aes(x = date, y = sunshine, fill = "Sunshine"), alpha = 0.5) +
geom_area(aes(x = date, y = cloud_cover, fill = "Cloud Cover"), alpha = 0.5) +
scale_fill_manual(values = c("Sunshine" = "#d69e1e", "Cloud Cover" = "#696969")) +
labs(title = "Area Plot of Sunshine and Cloud Cover", x = "Date", y = "Value", fill = "Variable") +
theme_minimal()
print(combined_area_plot)
# Convert data to long format
df_long <- df_london_clean %>%
pivot_longer(cols = c(cloud_cover, sunshine),
names_to = "Variable",
values_to = "Value")
# Create the area plot
area_plot <- ggplot(df_long, aes(x = date, y = Value, fill = Variable)) +
geom_area(alpha = 0.5) +
scale_fill_manual(values = c("Cloud Cover" = "#696969", "Sunshine" = "#d69e1e")) +
labs(title = "Area Plot of Sunshine and Cloud Cover", x = "Date", y = "Value", fill = "Variable") +
theme_minimal()
print(area_plot)
View(df_long)
#   Housekeeping
setwd("/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/20713479-DatSci-Prac")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#   Clear environment
rm(list = ls())
options(scipen = 999)
#   Get external code
source("utilities/aesthetics.R") #  Get plot themes
source("utilities/convert_numeric.R")  # Convert multiple columns to numeric
#   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo,
rnaturalearth, rnaturalearthdata, sf, lwgeom, jtools)
#   Load Data
path <- "data/London/"
file <- "london_weather.csv"
df_london <- read_csv(paste0(path, file))
file <- "UKMonthly_Detailed.csv"
df_uk <- read_csv(paste0(path, file))
df_london$date <- as.Date(as.character(df_london$date), format = "%Y%m%d")
df_london$month <- month(df_london$date, label=TRUE) # Create a new column for months
# Calculate the mean temperature
df_london_temp <- df_london %>%
filter(!is.na(mean_temp))
mean_temperature <- round(mean(df_london_temp$mean_temp), 2)
# Create the plot
ggplot(df_london_temp, aes(x = mean_temp, y = month, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
scale_fill_gradientn(colors = palette2) +
geom_vline(xintercept = mean_temperature, linetype = "dashed", color = "black") +
theme_ridges() +
th +
labs(title = "How cold is London throughout the year?",
x = "Temperature (째C)",
y = "Month",
subtitle = paste0("Dashed line represents the mean temperature in London (", mean_temperature, " 째C)"))
# Create a new data frame for rainy days
df_rainy <- df_london %>%
filter(precipitation > 0)
# Make the precipitation values negative
df_rainy$precipitation <- -df_rainy$precipitation
# Create the plot
rain_cloud_plot <- ggplot(df_rainy, aes(x = 1, y = precipitation)) +
geom_violin(trim = FALSE, fill="#96d6de") +
#geom_boxplot(width = 0.1, fill="white", color = "black") +
geom_jitter(shape = 16, size = 0.5, alpha = 0.3, color = "#003f5c") +
labs(title = "Invest in an umbrella.",
subtitle = "Rain cloud plot of precipitation. The plot shows the distribution of rainfall,\nwith each drop presenting the precipitation observed in that day.",
x = "",
y = "Precipitation",
caption = "London is a rainy place, and this umbrella plot showcases just how rainy.") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
scale_y_continuous(labels = abs) + th +
theme(axis.text.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
print(rain_cloud_plot)
# Convert data to long format
df_long <- df_london_clean %>%
pivot_longer(cols = c(cloud_cover, sunshine),
names_to = "Variable",
values_to = "Value")
# Convert data to long format
df_long <- df_london %>%
pivot_longer(cols = c(cloud_cover, sunshine),
names_to = "Variable",
values_to = "Value")
df_long$date <- as.Date(df_long)
View(df_long)
# Convert data to long format
df_long <- df_london %>%
pivot_longer(cols = c(cloud_cover, sunshine),
names_to = "Variable",
values_to = "Value")
# Create the area plot
area_plot <- ggplot(df_long, aes(x = date, y = Value, fill = Variable)) +
geom_area(alpha = 0.5) +
scale_fill_manual(values = c("Cloud Cover" = "#696969", "Sunshine" = "#d69e1e")) +
labs(title = "Area Plot of Sunshine and Cloud Cover", x = "Date", y = "Value", fill = "Variable") +
theme_minimal()
print(area_plot)
# Convert data to long format
df_long <- df_london %>%
pivot_longer(cols = c(cloud_cover, sunshine),
names_to = "Variable",
values_to = "Value")
# Create the area plot
area_plot <- ggplot(df_long, aes(x = date, y = Value, fill = Variable)) +
geom_area(position = 'stack', alpha = 0.5) +
scale_fill_manual(values = c("Cloud Cover" = "#696969", "Sunshine" = "#d69e1e")) +
labs(title = "Area Plot of Sunshine and Cloud Cover", x = "Date", y = "Value", fill = "Variable") +
theme_minimal()
print(area_plot)
# Convert data to long format
df_long <- df_london %>%
pivot_longer(cols = c(cloud_cover, sunshine),
names_to = "Variable",
values_to = "Value")
# Create the area plot
area_plot <- ggplot(df_long, aes(x = date, y = Value, fill = Variable)) +
geom_area(position = 'stack', alpha = 0.5) +
scale_fill_manual(values = c("cloud_cover" = "#696969", "sunshine" = "#d69e1e")) +
labs(title = "Area Plot of Sunshine and Cloud Cover", x = "Date", y = "Value", fill = "Variable") +
theme_minimal()
# print(area_plot)
# ggplot(df_prop_deaths, aes(x = date, y = count, fill = continent)) +
#   geom_area(position = 'stack', alpha = 0.5) +
#   scale_fill_manual(values = palette) +
#   labs(title = "Area Plot of Proportion of COVID-19 Deaths to Cases by Continent over Time",
#        x = "Date",
#        y = "Proportion of Deaths",
#        fill = "Continent") +
#   th
# Convert data to long format
df_long <- df_london %>%
pivot_longer(cols = c(cloud_cover, sunshine),
names_to = "Variable",
values_to = "Value")
# Create the area plot
area_plot <- ggplot(df_long, aes(x = date, y = Value, fill = Variable)) +
geom_area(position = 'stack', alpha = 0.5) +
scale_fill_manual(values = c("#696969", "#d69e1e")) +
labs(title = "Area Plot of Sunshine and Cloud Cover", x = "Date", y = "Value", fill = "Variable") +
theme_minimal()
# print(area_plot)
# ggplot(df_prop_deaths, aes(x = date, y = count, fill = continent)) +
#   geom_area(position = 'stack', alpha = 0.5) +
#   scale_fill_manual(values = palette) +
#   labs(title = "Area Plot of Proportion of COVID-19 Deaths to Cases by Continent over Time",
#        x = "Date",
#        y = "Proportion of Deaths",
#        fill = "Continent") +
#   th
