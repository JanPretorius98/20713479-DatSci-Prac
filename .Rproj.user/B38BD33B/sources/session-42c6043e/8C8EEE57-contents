---
title: "An Analysis of the evolution of the Covid-19 pandemic"
author: "JH Pretorius"
date: "`r Sys.Date()`"

bibliography: Tex/ref.bib
output:
  pagedown::html_paged:
    # template: wp_paged.html
    # css: ['wp.css', 'wp-fonts.css', 'wp-page.css']
    css: ["Template/default-fonts-Texevier.css", "Template/default-page-Texevier.css", "Template/default-Texevier.css"]
    csl: Template/harvard-stellenbosch-university.csl # referencing format used.
    template: ["Template/paged-Texevier.html"]

    toc: FALSE
    # change to true for a self-contained document, but it'll be a litte slower for Pandoc to render
    self_contained: TRUE
abstract: |
    This is an abstract. Much can be written here. Uncomment this line to go without an abstract.
    Abstracts have no spaces, but can have bullets.

    Bullets can be created as follows

    + You can add bullets, but do not add colons please.

    + Line breaks are also not permitted.

---

```{r setup, include=FALSE}
#   Housekeeping
setwd("/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/20713479-DatSci-Prac")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
    #   Clear environment
rm(list = ls())
options(scipen = 999)

    #   Get external code
source("utilities/aesthetics.R") #  Get plot themes
source("utilities/convert_numeric.R")  # Convert multiple columns to numeric 
    #   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
               viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo, 
               rnaturalearth, rnaturalearthdata, sf, lwgeom)

    #   Load Data
path <- "data/Covid/"

file <- "Deaths_by_cause.csv"
df_deaths <- read_csv(paste0(path, file))

file <- "owid-covid-data.csv"
df_covid <- read_csv(paste0(path, file))
```

\newpage
# Exploratory Data Analysis  {-}

##      Africa's Experience     {-}

```{r prepare_data, echo=FALSE, warning=FALSE}
df_covid <- convert_to_numeric(df_covid, 5)
#   Aggregate the data
df_covid_continent <- df_covid %>%
    filter(!is.na(continent)) %>%
    group_by(date, continent) %>%
    summarize(
        new_cases_per_million = sum(new_cases_per_million, na.rm = TRUE),
        new_deaths_per_million = sum(new_deaths_per_million, na.rm = TRUE),
        new_deaths = sum(new_deaths, na.rm = TRUE),
        new_cases = sum(new_cases, na.rm = TRUE),
        total_deaths = sum(new_deaths, na.rm = TRUE),
        total_cases = sum(new_cases, na.rm = TRUE),
        new_cases_smoothed = sum(new_cases_smoothed, na.rm = TRUE),
        new_deaths_smoothed = sum(new_deaths_smoothed, na.rm = TRUE),
        .groups = "drop"
    )

#   Convert data from wide to long format
df_covid_long <- df_covid_continent %>%
    pivot_longer(cols = c(new_cases_per_million, new_deaths_per_million, new_cases, new_deaths, new_cases_smoothed, new_deaths_smoothed), names_to = "category", values_to = "count")

# Create custom labels for facets
custom_labels <- as_labeller(c(new_cases_per_million = "New Cases (per million)", new_deaths_per_million = "New Deaths (per million)"))
```

```{r streamgraph, fig.align='center', echo=FALSE, fig.height=5, fig.width=7}

# Create a faceted streamgraph
df_covid_long %>%
    filter(category == "new_cases_per_million" | category == "new_deaths_per_million") %>% 
    ggplot(aes(x = date, y = count, fill = continent)) +
    geom_stream() +
    scale_fill_manual(values = palette) +
    facet_wrap(~ category, scales = "free", ncol = 1, labeller = custom_labels) +
    th +
    theme(panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          axis.text.x.top = element_blank(),
          axis.text.y = element_blank(),
          axis.title.y = element_blank(),
          legend.position = "bottom") +
    labs(title = "Figure 1: COVID-19 cases and deaths over time by continent",
         subtitle = "Top panel represents daily new cases. Bottom panel represents daily new deaths.",
         x = "",
         y = "Count",
         fill = "Continent")


```
From the figure it becomes clear that Europe carried the bulk of covid cases and deaths, with Asia following closely. Interestingly, while South American and African countries have fewer covid cases throughout, it seems that covid-related deaths are relatively higher for these countries, especially as the pandemic progresses.

\newpage
```{r lineplots, fig.align='center', fig.height=6, fig.width=8, echo=FALSE, warning=FALSE}
# Aggregate the data and calculate cumulative cases and deaths
df_covid_cumulative <- df_covid %>%
    filter(!is.na(continent)) %>%
    group_by(continent, date) %>%
    summarise(
        new_cases = sum(new_cases, na.rm = TRUE),
        new_deaths = sum(new_deaths, na.rm = TRUE),
        .groups = "drop"
    ) %>%
    arrange(continent, date) %>%
    group_by(continent) %>%
    mutate(
        total_cases = cumsum(new_cases),
        total_deaths = cumsum(new_deaths),
        death_proportion = total_deaths / total_cases
    )

# Convert from wide to long format for plotting
df_prop <- df_covid_cumulative %>%
    pivot_longer(cols = c(total_cases, total_deaths, death_proportion), names_to = "category", values_to = "count")

# Filter to include only death_proportion
df_prop_deaths <- df_prop %>%
    filter(category == "death_proportion")

# Create an area plot of the proportion of deaths by continent
ggplot(df_prop_deaths, aes(x = date, y = count, fill = continent)) +
    geom_area(position = 'stack') +
    scale_fill_manual(values = palette) +
    labs(x = "Date", y = "Proportion of Deaths", fill = "Continent") +
    th +
    labs(title = "Figure 3: Proportion of COVID-19 deaths to cases by continent over time")


```

```{r testplot, fig.align='center', fig.height=6, fig.width=8, echo=FALSE, warning=FALSE}

# Compute the total tests per thousand for each continent on each date
df_tests_per_thousand <- df_covid %>%
    filter(!is.na(continent)) %>%
    group_by(continent, date) %>%
    summarize(
        total_tests = sum(total_tests, na.rm = TRUE),
        population = sum(population, na.rm = TRUE),
        .groups = "drop"
    ) %>%
    mutate(total_tests_per_thousand = total_tests / (population / 100)) %>%
    arrange(continent, date) %>%
    group_by(continent) %>%
    mutate(total_tests_30day_avg = rollmean(total_tests_per_thousand, 30, fill = NA, align = "right"))

# Plot the total tests per thousand by continent over time
ggplot(df_tests_per_thousand, aes(x = date, y = total_tests_30day_avg, color = continent)) +
    geom_line(size = 1) +
    scale_color_manual(values=palette) +
    th + 
    labs(x = "Date", y = "Total tests per thousand*", color = "Continent",
         caption = "*30-day Average.",
         title = "Figure 3: Total tests available over time by continent.")

```


```{r vaxplot, fig.align='center', fig.height=6, fig.width=8, echo=FALSE}
# Create data frame with cumulative vaccinations by date for each continent
df_vaccinations <- df_covid %>%
    filter(!is.na(continent)) %>%
    group_by(continent, date) %>%
    summarize(
        total_vaccinations = sum(people_vaccinated, na.rm = TRUE),
        population = sum(population, na.rm = TRUE),
        .groups = "drop"
    ) %>%
    mutate(total_vaccinations_per_hundred = total_vaccinations / (population / 100)) %>%
    arrange(continent, date) %>%
    group_by(continent) %>%
    mutate(vaccination_30day_avg = rollmean(total_vaccinations_per_hundred, 30, fill = NA, align = "right"))


# Plot 7-day average of vaccinations per hundred over time, colored by continent
df_vaccinations %>%
    filter(date > as.Date("2021-01-01")) %>% 
    ggplot(aes(x = date, y = vaccination_30day_avg, color = continent)) +
    geom_line(size = 1) +
    scale_color_manual(values=palette) +
    th + 
    labs(x = "Date", y = "People Vaccinated Per Hundred*", color = "Continent",
         caption = "*30-day Average",
         title = "Figure 4: People vaccinated over time by continent.")


```

```{r geospatial_data, echo=FALSE, warning=FALSE, fig.height=6, fig.width=8, fig.align='center'}

# Load the map data
world_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
  filter(admin != "Antarctica")

# Filter COVID-19 data for the specific dates and calculate quarterly averages
df_covid_2021_Q1 <- df_covid %>%
  filter(between(month(date), 1, 3), year(date) == 2021) %>%
  group_by(location) %>%
  summarize(avg_people_vaccinated_per_hundred = mean(people_vaccinated_per_hundred, na.rm = TRUE),
            avg_new_deaths_per_million = mean(new_deaths_per_million, na.rm = TRUE))

df_covid_2021_Q4 <- df_covid %>%
  filter(between(month(date), 10, 12), year(date) == 2021) %>%
  group_by(location) %>%
  summarize(avg_people_vaccinated_per_hundred = mean(people_vaccinated_per_hundred, na.rm = TRUE),
            avg_new_deaths_per_million = mean(new_deaths_per_million, na.rm = TRUE))

# Merge the map data with the COVID-19 data
world_2021_Q1 <- left_join(world_map, df_covid_2021_Q1, by = c("name" = "location"))
world_2021_Q4 <- left_join(world_map, df_covid_2021_Q4, by = c("name" = "location"))

# Define a function to create a choropleth map
create_map <- function(df) {
  # Compute the representative points for each country
  points <- st_point_on_surface(st_geometry(df))
  
  # Add the longitude and latitude of the representative points to the data frame
  df$lon <- st_coordinates(points)[,1]
  df$lat <- st_coordinates(points)[,2]
  
  # Create the plot
  ggplot(data = df) +
    geom_sf(aes(fill = avg_new_deaths_per_million)) +
    geom_point(aes(x = lon, y = lat, size = avg_people_vaccinated_per_hundred), color = "#dd5182", alpha = 0.6) +
    scale_fill_gradientn(colors = c("#003f5c", "#444e86", "#955196", "#dd5182", "#ff6e54", "#ffa600"),
                         na.value = "white",
                         name = "Total Deaths per Million",
                         limits = c(0, 20)) +  # Adjust the limits as per your desired range
    scale_size_continuous(guide = "none", range = c(1, 4), name = "People Vaccinated per Hundred") +
    th +
    theme(axis.title.x = element_blank(),
          axis.text.x = element_blank(),
          axis.title.y = element_blank(),
          axis.text.y = element_blank(),
          legend.position = "bottom",
          plot.margin = margin(0, 0, 0, 0))
}

# Create the maps
map_2021Q1 <- create_map(world_2021_Q1)
map_2021Q4 <- create_map(world_2021_Q4)

map_2021Q1 <- map_2021Q1 +
    labs(title = "Figure 5: COVID-19 Outcomes and People Vaccinated per Hundred*",
         subtitle = "Top panel (2021-Q1) and bottom panel (2021-Q4) represent choropleth and bubble plots of COVID-19 related deaths.\nSizes of bubbles relate to number of people vaccinated per 100.") +
    theme(legend.position = "none")

map_2021Q4 <- map_2021Q4 +
    labs(caption = "*Calculated as quarterly average.")

# Print the maps
print(map_2021Q1)
print(map_2021Q4)



```




