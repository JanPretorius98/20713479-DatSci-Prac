---
title: "London Wetter, Cape Town Better."
author: "JH Pretorius"
date: "`r Sys.Date()`"
bibliography: Tex/ref.bib       
output:
  pagedown::html_paged:
    # template: wp_paged.html
    # css: ['wp.css', 'wp-fonts.css', 'wp-page.css']
    css: ["Template/default-fonts-Texevier.css", "Template/default-page-Texevier.css", "Template/default-Texevier.css"]
    csl: Template/harvard-stellenbosch-university.csl # referencing format used.
    template: ["Template/paged-Texevier.html"]

    toc: FALSE
    # change to true for a self-contained document, but it'll be a litte slower for Pandoc to render
    self_contained: TRUE

---

```{r setup, include=FALSE}
#   Housekeeping
setwd("/Users/janhendrikpretorius/Library/CloudStorage/OneDrive-StellenboschUniversity/20713479-DatSci-Prac")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
    #   Clear environment
rm(list = ls())
options(scipen = 999)

    #   Get external code
source("utilities/aesthetics.R") #  Get plot themes
source("utilities/convert_numeric.R")  # Convert multiple columns to numeric 
    #   Load libraries
pacman::p_load(dplyr, ggplot2, tidyverse, stringr, tidytext, ggridges, wordcloud2, ggmap, readxl, maps,
               viridis, lubridate, ggstream, modelsummary, gt, knitr, kableExtra, ggrepel, zoo, 
               rnaturalearth, rnaturalearthdata, sf, lwgeom, jtools)

    #   Load Data
path <- "data/London/"

file <- "london_weather.csv"
df_london <- read_csv(paste0(path, file))

file <- "UKMonthly_Detailed.csv"
df_detailed <- read_csv(paste0(path, file))

file <- "cpt_weather.xlsx"
df_cpt <- read_xlsx(paste0(path, file))

```

\newpage

## The Terrible London Weather {-}

```{r cleanData}
df_london$date <- as.Date(as.character(df_london$date), format = "%Y%m%d")
df_london$month <- month(df_london$date, label=TRUE) # Create a new column for months

# Convert DATE column to date object
df_detailed$DATE <- as.Date(paste(df_detailed$DATE, "01", sep = "-"))

```

```{r tempplot}
# Calculate the mean temperature
df_london_temp <- df_london %>%
    filter(!is.na(mean_temp))

mean_temperature <- round(mean(df_london_temp$mean_temp), 2)


# Create the plot
ggplot(df_london_temp, aes(x = mean_temp, y = month, fill = ..x..)) +
  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
  scale_fill_gradientn(colors = palette2) +
  geom_vline(xintercept = mean_temperature, linetype = "dashed", color = "black") +
  theme_ridges() + 
  th +
  labs(title = "Grab your K-way jacket and some blankets.\nLondon is freezing!",
       x = "Temperature (°C)",
       y = "Month",
       subtitle = paste0("Dashed line represents the mean temperature in London (", mean_temperature, " °C)"),
       caption = "This graph shows the distribution of temperature in London. Summer distributions are skewed to\nthe right. In non-analyst terms, this means it even tends to the colder side in the Summer!")


```
```{r}
# Create a new data frame for rainy days
df_rainy <- df_london %>% 
  filter(precipitation > 0)

# Make the precipitation values negative
df_rainy$precipitation <- -df_rainy$precipitation

# Create the plot
rain_cloud_plot <- ggplot(df_rainy, aes(x = 1, y = precipitation)) +
  geom_violin(trim = FALSE, fill="#96d6de") +
  #geom_boxplot(width = 0.1, fill="white", color = "black") +
  geom_jitter(shape = 16, size = 0.5, alpha = 0.3, color = "#003f5c") +
  labs(title = "Invest in an umbrella.",
       subtitle = "Rain cloud plot of precipitation. The plot shows the distribution of rainfall,\nwith each drop presenting the precipitation observed in that day.",
       x = "", 
       y = "Precipitation",
       caption = "London is a rainy place, and this umbrella plot showcases just how rainy.") +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank()) +
  scale_y_continuous(labels = abs) + th +
    theme(axis.text.x = element_blank(),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank())

print(rain_cloud_plot)
```

```{r warning=FALSE}

# Convert data to long format
df_long <- df_london %>%
  mutate(month = format(date, "%m")) %>%
  pivot_longer(cols = c(cloud_cover, sunshine),
               names_to = "Variable",
               values_to = "Value") %>%
  group_by(month, Variable) %>%
  summarise(mean_Value = mean(Value, na.rm = TRUE), .groups = "drop")

# Order the data by month
df_long$month <- factor(df_long$month, levels = c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"),
                        labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"), 
                        ordered = TRUE)

# Create the area plot
area_plot <- ggplot(df_long, aes(x = month, y = mean_Value, fill = Variable, group = Variable)) +
  geom_area(position = 'stack', alpha = 0.8) +
  scale_fill_manual(values = c("#696969", "#d69e1e"), labels = c("Cloud Cover", "Sunshine")) +
  labs(title = "At least you'll save money on not buying sunglasses.", 
       x = "Month", 
       y = "Proportion of Sky", 
       fill = "Variable",
       caption = "Cloudy days await, as the the sun peers through the clouds throughout the year.",
       subtitle = "Area plot of sunshine and cloud coverage throughout the year.") +
  th +
  theme(legend.position = "bottom")

print(area_plot)


```
As you can see, London is in fact fairly wet, cold and cloudy.

##       In contrast to the lovely Cape Town weather...      {-}

```{r}

# Aggregate df_london to get mean max_temp and mean_min_temp per month
df_london_agg <- df_london %>% 
  mutate(Month = format(date, "%b")) %>%
  group_by(Month) %>%
  summarise(
    High = mean(max_temp, na.rm = TRUE),
    Low = mean(min_temp, na.rm = TRUE),
    Rain = mean(precipitation, na.rm = TRUE),
    mean_temp = mean(mean_temp, na.rm = TRUE)
  )

# Add a new column to each data frame to indicate the city
df_london_agg <- df_london_agg %>% mutate(City = "London")
df_cpt <- df_cpt %>% mutate(City = "Cape Town")

# Bind the two data frames together
df_combined <- bind_rows(df_london_agg, df_cpt)

# Ensure that the Month factor levels are in the correct order
df_combined$Month <- factor(df_combined$Month, levels = month.abb)

# Plotting
ggplot(df_combined, aes(x = Month, group = City)) +
  geom_line(aes(y = High, color = City), size = 1) +
  geom_line(aes(y = Low, color = City), size = 1, linetype = "dashed") +
  labs(
    title = "Winter in Cape Town is only slightly colder than the\nLondon 'Summer'.",
    subtitle = "Comparison of Mean High and Low Temperatures.",
    x = "Month", 
    y = "Temperature (°C)", 
    color = "City"
  ) +
  scale_color_manual(values = c("London" = "#96d6de", "Cape Town" = "#ffa600")) +
  th


```
```{r}
# Filter out rows with NA values in df_london
df_london_clean <- df_london %>%
  filter(!is.na(precipitation))

# Calculate the number of rainy days in each month for London
df_london_clean <- df_london_clean %>%
  mutate(rainy_day = ifelse(precipitation > 0, 1, 0))

df_rainy <- df_london_clean %>%
  group_by(month = format(date, "%m"), year = format(date, "%Y")) %>%
  summarise(rain = sum(rainy_day)) %>%
  group_by(month) %>%
  summarise(Rain = mean(rain))

# We need to ensure the month is ordered correctly
df_rainy$month <- factor(df_rainy$month, levels = c("01","02","03","04","05","06","07","08","09","10","11","12"))

# Convert numeric month to abbreviated month names
df_rainy$Month <- month.abb[as.numeric(df_rainy$month)]

# Add a City column to df_rainy
df_rainy <- df_rainy %>%
  mutate(City = "London")

# Convert Month in df_cpt to character to match df_rainy
df_cpt$Month <- as.character(df_cpt$Month)

# Join the datasets together
df_combined <- full_join(df_cpt, df_rainy, by = c("Month", "City", "Rain"))


```

```{r}

# Make values for London negative
df_combined$Rain[df_combined$City == "London"] <- -df_combined$Rain[df_combined$City == "London"]

# Convert Month to a factor and specify the level order
df_combined$Month <- factor(df_combined$Month, levels = month.abb)

# Create the back-to-back bar plot
rain_bar_plot <- ggplot(df_combined, aes(x = Month, y = Rain, fill = City)) +
  geom_bar(stat = "identity", position = "identity") +
  coord_flip() +
  scale_fill_manual(values = c("London" = "#96d6de", "Cape Town" = "#ffa600")) +
  labs(title = "We're not made of sugar, but staying dry in Cape Town\nsounds nice.",
       x = "Month",
       y = "Average Number of Rainy Days",
       fill = "City") +
  th +
  theme(text = element_text(size = 16), 
        legend.position = "bottom")

print(rain_bar_plot)

```


##       Conclusion      {-}

London is:

* Cold.
* Rainy.
* Cloudy.

Cape Town is better than wetter London.